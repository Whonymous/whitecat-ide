// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.az');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Şərh əlavə et";
Blockly.Msg.AM412 = "PIR - AM412";  // untranslated
Blockly.Msg.ANALOG_JOYSTICK = "Analog joystick";  // untranslated
Blockly.Msg.ANALOG_PINS = "analog pin";  // untranslated
Blockly.Msg.AS = "as";  // untranslated
Blockly.Msg.BAND = "band";  // untranslated
Blockly.Msg.BITLOGIC_LSB_HELPURL = "";  // untranslated
Blockly.Msg.BITLOGIC_LSB_TITLE = "LSB %1";  // untranslated
Blockly.Msg.BITLOGIC_LSB_TOOLTIP = "Returns the LSB (less significant byte) of the input.";  // untranslated
Blockly.Msg.BITLOGIC_MSB_HELPURL = "";  // untranslated
Blockly.Msg.BITLOGIC_MSB_TITLE = "MSB %1";  // untranslated
Blockly.Msg.BITLOGIC_MSB_TOOLTIP = "Returns the MSB (most significant byte) of the input.";  // untranslated
Blockly.Msg.BITSOFRESOLUTION = "bits of resolution";  // untranslated
Blockly.Msg.BITWISE_HELPURL = "";  // untranslated
Blockly.Msg.BITWISE_TOOLTIP = "";  // untranslated
Blockly.Msg.CANCEL = "Cancel";  // untranslated
Blockly.Msg.CAN_EXT = "extended";  // untranslated
Blockly.Msg.CAN_FRAME_ALREADY_EXISTS = "An frame named '%1' already exists.";  // untranslated
Blockly.Msg.CAN_FRAME_CANCEL = "Cancel";  // untranslated
Blockly.Msg.CAN_FRAME_CANNOT_REMOVE = "This frame cannot remove.";  // untranslated
Blockly.Msg.CAN_FRAME_CANNOT_RENAME = "This frame cannot rename.";  // untranslated
Blockly.Msg.CAN_FRAME_CREATE = "Creeate frame ...";  // untranslated
Blockly.Msg.CAN_FRAME_NAME = "Frame name";  // untranslated
Blockly.Msg.CAN_GET = "get";  // untranslated
Blockly.Msg.CAN_GET_D0 = "data 0";  // untranslated
Blockly.Msg.CAN_GET_D1 = "data 1";  // untranslated
Blockly.Msg.CAN_GET_D2 = "data 2";  // untranslated
Blockly.Msg.CAN_GET_D3 = "data 3";  // untranslated
Blockly.Msg.CAN_GET_D4 = "data 4";  // untranslated
Blockly.Msg.CAN_GET_D5 = "data 5";  // untranslated
Blockly.Msg.CAN_GET_D6 = "data 6";  // untranslated
Blockly.Msg.CAN_GET_D7 = "data 7";  // untranslated
Blockly.Msg.CAN_GET_FROM_FRAME = "from";  // untranslated
Blockly.Msg.CAN_GET_HELPURL = "Get a field value from a CAN frame.";  // untranslated
Blockly.Msg.CAN_GET_IDENTIFIER = "identifier";  // untranslated
Blockly.Msg.CAN_GET_LEN = "length";  // untranslated
Blockly.Msg.CAN_GET_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_GET_TO_FRAME = "to";  // untranslated
Blockly.Msg.CAN_GET_TYPE = "type";  // untranslated
Blockly.Msg.CAN_READ = "read from ";  // untranslated
Blockly.Msg.CAN_READ_HELPURL = "";  // untranslated
Blockly.Msg.CAN_READ_TOOLTIP = "Read a frame from the CAN bus.";  // untranslated
Blockly.Msg.CAN_SET = "set";  // untranslated
Blockly.Msg.CAN_SET_D0 = "data 0";  // untranslated
Blockly.Msg.CAN_SET_D1 = "data 1";  // untranslated
Blockly.Msg.CAN_SET_D2 = "data 2";  // untranslated
Blockly.Msg.CAN_SET_D3 = "data 3";  // untranslated
Blockly.Msg.CAN_SET_D4 = "data 4";  // untranslated
Blockly.Msg.CAN_SET_D5 = "data 5";  // untranslated
Blockly.Msg.CAN_SET_D6 = "data 6";  // untranslated
Blockly.Msg.CAN_SET_D7 = "data 7";  // untranslated
Blockly.Msg.CAN_SET_FILTER = "set filter for";  // untranslated
Blockly.Msg.CAN_SET_FILTER_FROM = "from";  // untranslated
Blockly.Msg.CAN_SET_FILTER_HELPURL = "Set a filter. Only messages that it's id match the filter are accepted.";  // untranslated
Blockly.Msg.CAN_SET_FILTER_TO = "to";  // untranslated
Blockly.Msg.CAN_SET_FILTER_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_SET_HELPURL = "Set a frame field to an specified value.";  // untranslated
Blockly.Msg.CAN_SET_IDENTIFIER = "identifier";  // untranslated
Blockly.Msg.CAN_SET_LEN = "length";  // untranslated
Blockly.Msg.CAN_SET_SPEED = "set speed for";  // untranslated
Blockly.Msg.CAN_SET_SPEED_HELPURL = "";  // untranslated
Blockly.Msg.CAN_SET_SPEED_TOOLTIP = "Set speed for CAN bus.";  // untranslated
Blockly.Msg.CAN_SET_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_SET_TO_FRAME = "to frame";  // untranslated
Blockly.Msg.CAN_SET_TO_VALUE = "value";  // untranslated
Blockly.Msg.CAN_SET_TYPE = "type";  // untranslated
Blockly.Msg.CAN_STD = "standard";  // untranslated
Blockly.Msg.CAN_TYPE_HELPURL = "";  // untranslated
Blockly.Msg.CAN_TYPE_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_WRITE = "write to ";  // untranslated
Blockly.Msg.CAN_WRITE_FRAME = "frame";  // untranslated
Blockly.Msg.CAN_WRITE_HELPURL = "Send a frame to the CAN bus.";  // untranslated
Blockly.Msg.CAN_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.CHANGE_VALUE_TITLE = "Qiyməti dəyiş:";
Blockly.Msg.CLEAN_UP = "Blokları təmizlə";
Blockly.Msg.CLOSE = "Close";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Blokları yığ";
Blockly.Msg.COLLAPSE_BLOCK = "Bloku yığ";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "rəng 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "rəng 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "nisbət";
Blockly.Msg.COLOUR_BLEND_TITLE = "qarışdır";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "İki rəngi verilmiş nisbətdə (0,0 - 1,0) qarışdırır.";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://az.wikipedia.org/wiki/Rəng";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Palitradan bir rəng seçin.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "təsadüfi rəng";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Təsadüfi bir rəng seçin.";
Blockly.Msg.COLOUR_RGB_BLUE = "mavi";
Blockly.Msg.COLOUR_RGB_GREEN = "yaşıl";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "qırmızı";
Blockly.Msg.COLOUR_RGB_TITLE = "rənglə";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Qırmızı, yaşıl və mavinin göstərilən miqdarı ilə bir rəng düzəlt. Bütün qiymətlər 0 ilə 100 arasında olmalıdır.";
Blockly.Msg.CONFIGURE = "Configure";  // untranslated
Blockly.Msg.CONFIGURE_LORA = "Configure LoRa...";  // untranslated
Blockly.Msg.CONFIGURE_MQTT = "Configure client...";  // untranslated
Blockly.Msg.CONFIGURE_WIFI = "Configure...";  // untranslated
Blockly.Msg.CONFIGURE_WIFI_STA = "Configure WIFI station...";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "dövrdən çıx";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "dövrün növbəti addımından davam et";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Cari dövrdən çıx.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Bu dövrün qalanını ötür və növbəti addımla davam et.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Xəbərdarlıq: Bu blok ancaq dövr daxilində istifadə oluna bilər.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "hər element üçün %1 siyahıda %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Siyahıdakı hər element üçün \"%1\" dəyişənini elementə mənimsət və bundan sonra bəzi əmrləri yerinə yetir.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "say: %1 %2 ilə başlayıb, %3 qiymətinə kimi %4 qədər dəyiş";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "\"%1\" dəyişəni başlanğıc ədəddən son ədədə qədər göstərilən aralıqla qiymətlər aldıqca göstərilən blokları yerinə yetir.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "\"Əgər\" blokuna bir şərt əlavə et.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "\"Əgər\" blokuna qalan bütün halları əhatə edəb son bir şərt əlavə et.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Bu \"əgər\" blokunu dəyişdirmək üçün bölümlərin yenisini əlavə et, sil və ya yerini dəyiş.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "əks halda";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "əks halda əgər";
Blockly.Msg.CONTROLS_IF_MSG_IF = "əgər";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Əgər qiymət doğrudursa, onda bəzi əmrləri yerinə yetir.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Əgər qiymət doğrudursa, onda birinci əmrlər blokunu yerinə yetir. Əks halda isə ikinci əmrlər blokunu yerinə yetir.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Əgər birinci qiymət doğrudursa, onda birinci əmrlər blokunu yerinə yetir. Əks halda əgər ikinci qiymət doğrudursa, onda ikinci əmrlər blokunu yerinə yetir.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Əgər birinci qiymət doğrudursa, onda birinci əmrlər blokunu yerinə yetir. Əks halda əgər ikinci qiymət doğrudursa, onda ikinci əmrlər blokunu yerinə yetir. Əgər qiymətlərdən heç biri doğru deyilsə, onda axırıncı əmrlər blokunu yerinə yetir.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://az.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "icra et";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "%1 dəfə təkrar et";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Bəzi əmrləri bir neçə dəfə yerinə yetir.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "təkrar et, ta ki";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "təkrar et, hələ ki";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Hələ ki, qiymət \"yalan\"dır, bəzi əmrləri yerinə yetir.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Hələ ki, qiymət \"doğru\"dur, bəzi əmrləri yerinə yetir.";
Blockly.Msg.CPU_SLEEP = "sleep CPU";  // untranslated
Blockly.Msg.CREATE_MQTT = "Configure MQTT client...";  // untranslated
Blockly.Msg.DEFAULT_CAN_FRAME = "frame";  // untranslated
Blockly.Msg.DEFAULT_EVENT = "event";  // untranslated
Blockly.Msg.DELETE_ALL_BLOCKS = "Bütün %1 blok silinsin?";
Blockly.Msg.DELETE_BLOCK = "Bloku sil";
Blockly.Msg.DELETE_CAN_FRAME = "Delete the '%1' frame";  // untranslated
Blockly.Msg.DELETE_EVENT = "Delete the '%1' event";  // untranslated
Blockly.Msg.DELETE_FILE = "Delete";  // untranslated
Blockly.Msg.DELETE_FILE_CONFIRM = "Do you want to delete %1?";  // untranslated
Blockly.Msg.DELETE_SENSOR = "Delete the '%1' sensor";  // untranslated
Blockly.Msg.DELETE_VARIABLE = "Delete the '%1' variable";  // untranslated
Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Delete %1 uses of the '%2' variable?";  // untranslated
Blockly.Msg.DELETE_X_BLOCKS = "%1 bloku sil";
Blockly.Msg.DISABLE_BLOCK = "Bloku söndür";
Blockly.Msg.DO = "do";  // untranslated
Blockly.Msg.DUPLICATE_BLOCK = "Dublikat";
Blockly.Msg.DUTY = "and duty";  // untranslated
Blockly.Msg.EDIT_CAN_FRAME_TITLE = "Edit frame ...";  // untranslated
Blockly.Msg.EDIT_EVENT_TITLE = "Edit event ...";  // untranslated
Blockly.Msg.EDIT_SENSOR = "Edit sensor ...";  // untranslated
Blockly.Msg.EDIT_SENSOR_TITLE = "Edit sensor ...";  // untranslated
Blockly.Msg.ENABLE_BLOCK = "Bloku aktivləşdir";
Blockly.Msg.ERROR = "Error";  // untranslated
Blockly.Msg.EVENT_ALREADY_EXISTS = "An event named '%1' already exists.";  // untranslated
Blockly.Msg.EVENT_BROADCAST = "broadcast";  // untranslated
Blockly.Msg.EVENT_BROADCAST_AND_WAIT = "and wait";  // untranslated
Blockly.Msg.EVENT_BROADCAST_AND_WAIT_TOOLTIP = "Sends a broadcast, activating When I Receive blocks that are set to that broadcast, and pauses until all scripts activated by the broadcast are completed";  // untranslated
Blockly.Msg.EVENT_BROADCAST_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_BROADCAST_TOOLTIP = "Sends a broadcast, activating When I Receive blocks that are set to that broadcast.";  // untranslated
Blockly.Msg.EVENT_CANCEL = "Cancel";  // untranslated
Blockly.Msg.EVENT_CANNOT_REMOVE = "This event cannot remove.";  // untranslated
Blockly.Msg.EVENT_CANNOT_RENAME = "This event cannot rename.";  // untranslated
Blockly.Msg.EVENT_CREATE = "Creeate event ...";  // untranslated
Blockly.Msg.EVENT_EVERY = "every";  // untranslated
Blockly.Msg.EVENT_EVERY_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_EVERY_TOOLTIP = "This block is invoked at regular time intervals.";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED = "is being processed?";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED_P = "";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED_TOOLTIP = "";  // untranslated
Blockly.Msg.EVENT_NAME = "Event name";  // untranslated
Blockly.Msg.EVENT_THREAD_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_THREAD_TOOLTIP = "";  // untranslated
Blockly.Msg.EVENT_WHEN_BOARD_STARTS = "when board starts";  // untranslated
Blockly.Msg.EVENT_WHEN_BOARD_STARTS_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_BOARD_STARTS_TOOLTIP = "This block is invoked at board startup. Tipically is used for initialize other blocks, and broadcast events.";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_CHANGES = "changes at";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN = "when digital pin";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN_TOOLTIP = "";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE = "when I receive";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME = "when I receive a LoRa frame";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME_TOOLTIP = "This block is invoked when a LoRa frame is received.";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_TOOLTIP = "This block will be invoked once the specified broadcast has been sent by an other script.";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_CONNECTED = "when Wi-Fi is connected";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_CONNECTED_TOOLTIP = "This block is invoked when the Wi-Fi connected.";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_DISCONNECTED = "when Wi-Fi is disconnected";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_DISCONNECTED_TOOLTIP = "This block is invoked when the Wi-Fi disconnected.";  // untranslated
Blockly.Msg.EXPAND_ALL = "Blokları aç";
Blockly.Msg.EXPAND_BLOCK = "Bloku aç";
Blockly.Msg.EXTERNAL_INPUTS = "Xarici girişlər";
Blockly.Msg.FALSE = "false";  // untranslated
Blockly.Msg.FILE_DELETED = "%1 has been deleted.";  // untranslated
Blockly.Msg.FOREVER = "forever";  // untranslated
Blockly.Msg.FREQUENCY = "to frequency";  // untranslated
Blockly.Msg.GPS = "NMEA GPS";  // untranslated
Blockly.Msg.HALL_FLOW = "Flow by hall effect";  // untranslated
Blockly.Msg.HALL_SWITCH = "Hall effect switch";  // untranslated
Blockly.Msg.HELP = "Kömək";
Blockly.Msg.HERTZS = "hertzs";  // untranslated
Blockly.Msg.HIGH = "high";  // untranslated
Blockly.Msg.IN = "in";  // untranslated
Blockly.Msg.INLINE_INPUTS = "Sətiriçi girişlər";
Blockly.Msg.INPUT = "input";  // untranslated
Blockly.Msg.INPUT_PINS = "input pin";  // untranslated
Blockly.Msg.INTERNAL_HALL = "Internal hall effect sensor";  // untranslated
Blockly.Msg.Khz = "Khz";  // untranslated
Blockly.Msg.LINEAR_POT = "Linear pot";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "boş siyahı düzəlt";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Heç bir verilən qeyd olunmamış, uzunluğu 0 olan bir siyahı verir";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "siyahı";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Bu siyahı blokunu yenidən konfigurasiya etmək üçün bölmələri əlavə edin, silin və ya yerlərini dəyişin.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "bunlardan siyahı düzəlt";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Siyahıya element əlavə edin.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "İstənilən ölçülü siyahı yaradın.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "birinci";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "axırdan # nömrəli";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "götür";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "götür və sil";
Blockly.Msg.LISTS_GET_INDEX_LAST = "axırıncı";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "təsadüfi";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "yığışdır";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Siyahının ilk elementini qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Siyahıdan təyin olunmuş indeksli elementi qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Siyahının son elementini qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Siyahıdan hər hansı təsadüfi elementi qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Siyahıdan ilk elementi silir və qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Siyahıdan təyin olunmuş indeksli elementi silir və qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Siyahıdan son elementi silir və qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Siyahıdan təsadufi elementi silir və qaytarır.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Siyahıdan ilk elementi silir.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Siyahıdan təyin olunmuş indeksli elementi silir.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Siyahıdan son elementi silir.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Siyahıdan təsadüfi bir elementi silir.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "sondan # nömrəliyə";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "# nömrəliyə";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "Sonuncuya";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "Birincidən alt-siyahını alın";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "# sonuncudan alt-siyahını alın";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "# - dən alt-siyahını alın";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Siyahının təyin olunmuş hissəsinin surətini yaradın.";
Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "%1 son elementdir.";
Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 ilk elementdir.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "Element ilə ilk rastlaşma indeksini müəyyən edin";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "Element ilə son rastlaşma indeksini müəyyən edin";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Siyahıda element ilə ilk/son rastlaşma indeksini qaytarır. Əgər tekst siyahıda tapılmazsa, %1 qaytarılır.";
Blockly.Msg.LISTS_INLIST = "siyahıda";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 boşdur";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Siyahı boşdursa \"doğru\" cavabını qaytarır.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "%1 siyahısının uzunluğu";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Siyahının uzunluğunu verir.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "%1 elementinin %2 dəfə təkrarlandığı siyahı düzəlt";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Təyin olunmuş elementin/qiymətin təyin olunmuş sayda təkrarlandığı siyahını yaradır.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "Kimi";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "daxil et";
Blockly.Msg.LISTS_SET_INDEX_SET = "təyin et";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Elementi siyahının əvvəlinə daxil edir.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Elementi siyahıda göstərilən yerə daxil edir.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Elementi siyahının sonuna artırır.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Elementi siyahıda təsadüfi seçilmiş bir yerə atır.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Siyahıda birinci elementi təyin edir.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Siyahının göstərilən yerdəki elementini təyin edir.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Siyahının sonuncu elementini təyin edir.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Siyahının təsadüfi seçilmiş bir elementini təyin edir.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";  // untranslated
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";  // untranslated
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";  // untranslated
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";  // untranslated
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "səhf";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "\"doğru\" və ya \"səhf\" cavanını qaytarır.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "doğru";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://az.wikipedia.org/wiki/bərabərsizlik_(riyazi)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Girişlər bir birinə bərabərdirsə \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Birinci giriş ikincidən böyükdürsə \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Birinci giriş ikincidən böyük və ya bərarbərdirsə \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Birinci giriş ikincidən kiçikdirsə \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Birinci giriş ikincidən kiçik və ya bərarbərdirsə \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Girişlər bərabər deyillərsə \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "%1 deyil";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Giriş \"yalan\"-dursa \"doğru\" cavabını qaytarır. Giriş \"doğru\"-dursa \"səhf\" cavabını qaytarır.";
Blockly.Msg.LOGIC_NULL = "boş";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Boş cavab qaytarır.";
Blockly.Msg.LOGIC_OPERATION_AND = "və";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "və ya";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Hər iki giriş \"doğru\"-dursa \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Girişlərdən heç olmasa biri \"doğru\"-dursa \"doğru\" cavabını qaytarır.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "əgər səhfdirsə";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "əgər doğrudursa";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "'Yoxla' əmrindəki şərtə nəzər yetirin. Əgər şərt \"doğru\"-dursa \"əgər doğru\", əks halda isə \"əgər yalan\" cavabını qaytarır.";
Blockly.Msg.LORA_ACTIVATION = "Activation";  // untranslated
Blockly.Msg.LORA_ACTIVATION_DATA = "Node activation data:";  // untranslated
Blockly.Msg.LORA_ADR = "Adaptative Data Rate";  // untranslated
Blockly.Msg.LORA_BAND = "Band";  // untranslated
Blockly.Msg.LORA_CONFIG_RETX = "Retransmissions";  // untranslated
Blockly.Msg.LORA_CONFIG_TITLE = "LoRa WAN configuration ...";  // untranslated
Blockly.Msg.LORA_CONFIRMED = "confirmed";  // untranslated
Blockly.Msg.LORA_DR = "Data Rate";  // untranslated
Blockly.Msg.LORA_FRAME = " frame to port ";  // untranslated
Blockly.Msg.LORA_FREQ = "Frequency";  // untranslated
Blockly.Msg.LORA_GATEWAY = "1-channel gateway";  // untranslated
Blockly.Msg.LORA_GET_ABP_DATA_HELP = "The Whitecat IDE offer to its users a TTN LoRa WAN application for test an ABP node. If you want to use it, please click the 'Get data' button to get the personalization data.";  // untranslated
Blockly.Msg.LORA_GET_DATA = "Get data ...";  // untranslated
Blockly.Msg.LORA_GET_OTAA_DATA_HELP = "The Whitecat IDE offer to its users a TTN LoRa WAN application for test an OTAA node. If you want to use it, please click the 'Get data' button to get the activation data.";  // untranslated
Blockly.Msg.LORA_GET_PAYLOAD = "get payload from received frame";  // untranslated
Blockly.Msg.LORA_GET_PORT = "get port from received frame";  // untranslated
Blockly.Msg.LORA_INVALID = "Invalid %1 value.";  // untranslated
Blockly.Msg.LORA_JOIN = "join";  // untranslated
Blockly.Msg.LORA_NODE = "Node";  // untranslated
Blockly.Msg.LORA_PAYLOAD = " with payload ";  // untranslated
Blockly.Msg.LORA_PERSONALIZATION_DATA = "Node personalization data:";  // untranslated
Blockly.Msg.LORA_ROLE = "Role";  // untranslated
Blockly.Msg.LORA_ROLE_GATEWAY_TITLE = "Gateway configuration:";  // untranslated
Blockly.Msg.LORA_ROLE_NODE_TITLE = "Basic node configuration:";  // untranslated
Blockly.Msg.LORA_SET_ADR = "set adaptative data rate to";  // untranslated
Blockly.Msg.LORA_SET_APPEUI = "set AppEui to";  // untranslated
Blockly.Msg.LORA_SET_APPKEY = "set AppKey to";  // untranslated
Blockly.Msg.LORA_SET_APPSKEY = "set setAppsKey to";  // untranslated
Blockly.Msg.LORA_SET_AR = "set automatic reply to";  // untranslated
Blockly.Msg.LORA_SET_DEVADDR = "set DevAddr to";  // untranslated
Blockly.Msg.LORA_SET_DEVEUI = "set DevEui to";  // untranslated
Blockly.Msg.LORA_SET_DR = "set data rate to";  // untranslated
Blockly.Msg.LORA_SET_NWKSKEY = "set NwksKey to";  // untranslated
Blockly.Msg.LORA_SET_RETX = "set retransmissions to";  // untranslated
Blockly.Msg.LORA_START_GW = "start gateway";  // untranslated
Blockly.Msg.LORA_STOP_GW = "stop gateway";  // untranslated
Blockly.Msg.LORA_TX = "transmit ";  // untranslated
Blockly.Msg.LORA_UNCONFIRMED = "unconfirmed";  // untranslated
Blockly.Msg.LOW = "low";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://az.wikipedia.org/wiki/Hesab";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "İki ədədin cəmini qaytarır.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "İki ədədin nisbətini qaytarır.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "İki ədədin fərqini qaytarır.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "İki ədədin hasilini verir.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Birinci ədədin ikinci ədəd dərəcəsindən qüvvətini qaytarır.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";  // untranslated
Blockly.Msg.MATH_CHANGE_TITLE = "dəyiş: %1 buna: %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "'%1' dəyişəninin üzərinə bir ədəd artır.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://az.wikipedia.org/wiki/Riyazi_sabitlər";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Ümumi sabitlərdən birini qaytarır π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), və ya ∞ (sonsuzluq).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "%1 üçün ən aşağı %2, ən yuxarı %3 olmağı tələb et";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Bir ədədin verilmiş iki ədəd arasında olmasını tələb edir (sərhədlər də daxil olmaqla).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "bölünür";
Blockly.Msg.MATH_IS_EVEN = "cütdür";
Blockly.Msg.MATH_IS_NEGATIVE = "mənfidir";
Blockly.Msg.MATH_IS_ODD = "təkdir";
Blockly.Msg.MATH_IS_POSITIVE = "müsətdir";
Blockly.Msg.MATH_IS_PRIME = "sadədir";
Blockly.Msg.MATH_IS_TOOLTIP = "Bir ədədin cüt, tək, sadə, tam, müsbət, mənfi olmasını və ya müəyyən bir ədədə bölünməsini yoxlayır. \"Doğru\" və ya \"yalan\" qiymətini qaytarır.";
Blockly.Msg.MATH_IS_WHOLE = "tamdır";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";  // untranslated
Blockly.Msg.MATH_MODULO_TITLE = "%1 ÷ %2 bölməsinin qalığı";
Blockly.Msg.MATH_MODULO_TOOLTIP = "İki ədədin nisbətindən alınan qalığı qaytarır.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://az.wikipedia.org/wiki/Ədəd";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Ədəd.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "siyahının ədədi ortası";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "siyahının maksimumu";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "siyahının medianı";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "siyahının minimumu";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "Siyahı modları( Ən çox rastlaşılan elementləri)";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "siyahıdan təsadüfi seçilmiş bir element";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "Siyahının standart deviasiyası";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "Siyahının cəmi";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Siyahıdaki ədədlərin ədədi ortasını qaytarır.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Siyahıdaki ən böyük elementi qaytarır.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Siyahının median elementini qaytarır.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Siyahıdaki ən kiçik ədədi qaytarır.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Siyahıdaki ən çox rastlanan element(lər)dən ibarət siyahı qaytarır.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Siyahıdan təsadüfi bir element qaytarır.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Siyahının standart deviasiyasını qaytarır.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Siyahıdakı bütün ədədlərin cəmini qaytarır.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "təsadüfi kəsr";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "0.0 (daxil olmaqla) və 1.0 (daxil olmamaqla) ədədlərinin arasından təsadüfi bir kəsr ədəd qaytarır.";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_TITLE = "%1 ilə %2 arasından təsadüfi tam ədəd";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Verilmiş iki ədəd arasından (ədədrlər də daxil olmaqla) təsadüfi bir tam ədəd qaytarır.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";  // untranslated
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "yuvarlaqlaşdır";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "aşağı yuvarlaqlaşdır";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "yuxarı yuvarlaqlaşdır";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Ədədi aşağı və ya yuxari yuvarlaqşdır.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://az.wikipedia.org/wiki/Kvadrat_kökləri";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "modul";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "kvadrat kök";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Ədədin modulunu qaytarır.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "e sabitinin verilmiş ədədə qüvvətini qaytarır.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Ədədin natural loqarifmini tapır.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Ədədin 10-cu dərəcədən loqarifmini tapır.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Ədədin əksini qaytarır.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "10-un verilmiş ədədə qüvvətini qaytarır.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Ədədin kvadrat kökünü qaytarır.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "arccos";
Blockly.Msg.MATH_TRIG_ASIN = "arcsin";
Blockly.Msg.MATH_TRIG_ATAN = "arctan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://az.wikipedia.org/wiki/Triqonometrik_funksiyalar";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tg";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Ədədin arccosinusunu qaytarır.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Ədədin arcsinusunu qaytarır.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Ədədin arctanqensini qaytarır.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Dərəcənin kosinusunu qaytarır (radianın yox).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Dərəcənin sinusunu qaytar (radianın yox).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Dərəcənin tangensini qaytar (radianın yox).";
Blockly.Msg.MHZ = "MHz";  // untranslated
Blockly.Msg.MQTT_CONFIG_TITLE = "Configure MQTT client ...";  // untranslated
Blockly.Msg.MQTT_GET_DATA = "Get data ...";  // untranslated
Blockly.Msg.MQTT_GET_DATA_HELP = "The Whitecat IDE offer to its users a MQTT broquer for testing purposes. If you want to use it, please click the 'Get data' button to get the connection data.";  // untranslated
Blockly.Msg.MQTT_GET_LEN = "get length of the received message";  // untranslated
Blockly.Msg.MQTT_GET_PAYLOAD = "get the received message";  // untranslated
Blockly.Msg.MQTT_INVALID = "Invalid value %1.";  // untranslated
Blockly.Msg.MQTT_PUBLISH = "publish";  // untranslated
Blockly.Msg.MQTT_QOS = "with";  // untranslated
Blockly.Msg.MQTT_SUBSCRIBE = "when a message is received to topic";  // untranslated
Blockly.Msg.MQTT_TO_TOPIC = "to topic";  // untranslated
Blockly.Msg.NEW_CAN_FRAME = "New frame ...";  // untranslated
Blockly.Msg.NEW_CAN_FRAME_TITLE = "New frame ...";  // untranslated
Blockly.Msg.NEW_EVENT = "New event ...";  // untranslated
Blockly.Msg.NEW_EVENT_TITLE = "New event ...";  // untranslated
Blockly.Msg.NEW_SENSOR = "Create new sensor...";  // untranslated
Blockly.Msg.NEW_SENSOR_SELECT_ONE = "(select one)";  // untranslated
Blockly.Msg.NEW_SENSOR_TITLE = "New sensor ...";  // untranslated
Blockly.Msg.NEW_VARIABLE = "Yeni dəyişən...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Yeni dəyişənin adı:";
Blockly.Msg.NO = "No";  // untranslated
Blockly.Msg.ONLY_ALLOWED_WITHIN_BLOCK = "Warning: This block may only be used within a \"%1\" block";  // untranslated
Blockly.Msg.ON_EVERY_RECEIVED_LORA_FRAME = "a LoRa WAN frame is received";  // untranslated
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.OUTPUT = "output";  // untranslated
Blockly.Msg.OUTPUT_PINS = "output pin";  // untranslated
Blockly.Msg.PERCENT = "%";  // untranslated
Blockly.Msg.PING28015 = "PING))) 28015";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";  // untranslated
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "ilə:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Yaradılmış '%1' funksiyasını çalışdır.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Yaradılmış '%1' funksiyasını çalışdır və nəticəni istifadə et.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "ilə:";
Blockly.Msg.PROCEDURES_CREATE_DO = "'%1' yarat";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "hansısa əməliyyat";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "icra et:";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Nəticəsi olmayan funksiya yaradır.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "qaytar";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Nəticəsi olan funksiya yaradır.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Xəbərdarlıq: Bu funksiyanın təkrar olunmuş parametrləri var.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Funksiyanın təyinatını vurğula";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Əgər bir dəyər \"doğru\"-dursa onda ikinci dəyəri qaytar.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Xəbərdarlıq: Bu blok ancaq bir funksiyanın təyinatı daxilində işlədilə bilər.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "Giriş adı:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "girişlər";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";  // untranslated
Blockly.Msg.PUSH_SWITCH = "Push switch";  // untranslated
Blockly.Msg.PWM_PINS = "pwm pin";  // untranslated
Blockly.Msg.REDO = "Redo";  // untranslated
Blockly.Msg.REL_ROT_ENCODER = "Relative rotary encoder";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Şərhi sil";
Blockly.Msg.REMOVE_SENSOR = "Remove sensor ...";  // untranslated
Blockly.Msg.RENAME_CAN_FRAME = "Rename frame...";  // untranslated
Blockly.Msg.RENAME_EVENT = "Rename event...";  // untranslated
Blockly.Msg.RENAME_SENSOR = "Renane sensor ...";  // untranslated
Blockly.Msg.RENAME_VARIABLE = "Dəyişənin adını dəyiş...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Bütün '%1' dəyişənlərinin adını buna dəyiş:";
Blockly.Msg.S2Y0A21 = "Sharp 2Y0A21";  // untranslated
Blockly.Msg.SENSOR = "Sensor";  // untranslated
Blockly.Msg.SENSOR_ACQUIRE = "acquire data from %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_ACQUIRE_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_ACQUIRE_TOOLTIP = "Acquire data from sensor.";  // untranslated
Blockly.Msg.SENSOR_ALREADY_EXISTS = "A sensor named '%1' already exists.";  // untranslated
Blockly.Msg.SENSOR_ATTACH = "attach %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_ATTACH_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_ATTACH_TOOLTIP = "Attach sensor to its hardware interface.";  // untranslated
Blockly.Msg.SENSOR_CANCEL = "Cancel";  // untranslated
Blockly.Msg.SENSOR_CATEGORY = "Category";  // untranslated
Blockly.Msg.SENSOR_CREATE = "Create";  // untranslated
Blockly.Msg.SENSOR_DEFAULT_NAME = "sensor";  // untranslated
Blockly.Msg.SENSOR_DEVICE_ADDR = "Adress on bus";  // untranslated
Blockly.Msg.SENSOR_DEVICE_ID = "Identifier on bus";  // untranslated
Blockly.Msg.SENSOR_DISCOVER = "Discover on bus";  // untranslated
Blockly.Msg.SENSOR_INT_ATTACHED = "%1 attached at";  // untranslated
Blockly.Msg.SENSOR_NAME = "Name in the workspace";  // untranslated
Blockly.Msg.SENSOR_READ1 = "read ";  // untranslated
Blockly.Msg.SENSOR_READ2 = " from %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_READ_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_READ_TOOLTIP = "Read data from sensor.";  // untranslated
Blockly.Msg.SENSOR_REMOVE_CONFIRM = "Do you want to remove %1 sensor from your project?";  // untranslated
Blockly.Msg.SENSOR_SET1 = "set ";  // untranslated
Blockly.Msg.SENSOR_SET2 = " with value ";  // untranslated
Blockly.Msg.SENSOR_SET3 = " for %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_SET_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_SET_TOOLTIP = "Set configuration options for sensor.";  // untranslated
Blockly.Msg.SENSOR_WHEN1 = "when ";  // untranslated
Blockly.Msg.SENSOR_WHEN2 = " changes from %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_WHEN_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_WHEN_TOOLTIP = "This block is invoked when the magnitude changes.";  // untranslated
Blockly.Msg.SERVO_ATTACH = "attach servo on pin";  // untranslated
Blockly.Msg.SERVO_ATTACH_HELPURL = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach a servo to a pin.";  // untranslated
Blockly.Msg.SERVO_CALIBRATE = "Calibrate ...";  // untranslated
Blockly.Msg.SERVO_MOVE = "move servo on pin";  // untranslated
Blockly.Msg.SERVO_MOVE_DEGREES = "degrees";  // untranslated
Blockly.Msg.SERVO_MOVE_HELPURL = "";  // untranslated
Blockly.Msg.SERVO_MOVE_TOOLTIP = "Moves the servo attached on pin by a number of degrees. If degrees are > 0 movement is clockwise, and if movement is < 0 movement is counterclockwise";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "bu mətni əlavə et:";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "bu mətnin sonuna:";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "'%1' dəyişəninin sonuna nəsə əlavə et.";
Blockly.Msg.TEXT_CATCH_TITLE = "catch";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "kiçik hərflərlə";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "Baş Hərflərlə";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "BÖYÜK HƏRFLƏRLƏ";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Mətndə hərflərin böyük-kiçikliyini dəyiş.";
Blockly.Msg.TEXT_CHARAT_FIRST = "birinci hərfi götür";
Blockly.Msg.TEXT_CHARAT_FROM_END = "axırdan bu nömrəli hərfi götür";
Blockly.Msg.TEXT_CHARAT_FROM_START = "bu nömrəli hərfi götür";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "növbəti mətndə";
Blockly.Msg.TEXT_CHARAT_LAST = "axırıncı hərfi götür";
Blockly.Msg.TEXT_CHARAT_RANDOM = "təsadüfi hərf götür";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Göstərilən mövqedəki hərfi qaytarır.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Mətnə bir element əlavə et.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "birləşdir";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Bu mətn blokunu yenidən konfigurasiya etmək üçün bölmələri əlavə edin, silin və ya yerlərini dəyişin.";
Blockly.Msg.TEXT_FINALLY = "finally";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "axırdan bu nömrəli hərfə qədər";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "bu nömrəli hərfə qədər";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "son hərfə qədər";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "mətndə";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "Mətnin surətini ilk hərfdən";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "Mətnin surətini sondan bu nömrəli # hərfdən";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "Mətnin surətini bu nömrəli hərfdən";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Mətnin təyin olunmuş hissəsini qaytarır.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "mətndə";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "Bu mətn ilə ilk rastlaşmanı tap:";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "Bu mətn ilə son rastlaşmanı tap:";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Birinci mətnin ikinci mətndə ilk/son rastlaşma indeksini qaytarır. Əgər rastlaşma baş verməzsə, %1 qaytarır.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 boşdur";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Verilmiş mətn boşdursa, doğru qiymətini qaytarır.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "Verilmişlərlə mətn yarat";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "İxtiyari sayda elementlərinin birləşməsi ilə mətn parçası yarat.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "%1 - ın uzunluğu";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Verilmiş mətndəki hərflərin(sözlər arası boşluqlar sayılmaqla) sayını qaytarır.";
Blockly.Msg.TEXT_PACK_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_PACK_TITLE1 = "pack hex string";  // untranslated
Blockly.Msg.TEXT_PACK_TITLE2 = "with";  // untranslated
Blockly.Msg.TEXT_PACK_TITLE3 = "to";  // untranslated
Blockly.Msg.TEXT_PACK_TOOLTIP = "Pack a set of values into an hex's string representation.";  // untranslated
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "%1 - i çap elə";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Təyin olunmuş mətn, ədəd və ya hər hansı bir başqa elementi çap elə.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "İstifadəçiyə ədəd daxil etməsi üçün sorğu/tələb göndərin.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "İstifadəçiyə mətn daxil etməsi üçün sorğu/tələb göndərin.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "İstifadəçiyə ədəd daxil etməsi üçün sorğunu/tələbi ismarıc kimi göndərin";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "İstifadəçiyə mətn daxil etməsi üçün sorğunu/tələbi ismarıc ilə göndərin";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";  // untranslated
Blockly.Msg.TEXT_TEXT_TOOLTIP = "Mətndəki hərf, söz və ya sətir.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "Boşluqları hər iki tərəfdən pozun";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "Boşluqlari yalnız sol tərəfdən pozun";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "Boşluqları yalnız sağ tərəfdən pozun";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Mətnin hər iki və ya yalnız bir tərəfdən olan boşluqları pozulmuş surətini qaytarın.";
Blockly.Msg.TEXT_TRY_CATCHED = "is catched";  // untranslated
Blockly.Msg.TEXT_TRY_CATCH_ERROR = "when error";  // untranslated
Blockly.Msg.TEXT_TRY_CATCH_OTHER_ERROR = "when other errors catched";  // untranslated
Blockly.Msg.TEXT_TRY_CATCH_RAISE_AGAIN = "raise catched error again";  // untranslated
Blockly.Msg.TEXT_TRY_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_TRY_TITLE = "try";  // untranslated
Blockly.Msg.TEXT_TRY_TOOLTIP = "Try to execute a set of statements and eventualy catch the errors without stop program.";  // untranslated
Blockly.Msg.TEXT_UNPACK_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_UNPACK_TITLE1 = "unpack hex string";  // untranslated
Blockly.Msg.TEXT_UNPACK_TITLE2 = "to";  // untranslated
Blockly.Msg.TEXT_UNPACK_TITLE3 = "from";  // untranslated
Blockly.Msg.TEXT_UNPACK_TOOLTIP = "Unpack a set of values encoded into an hex's string representation.";  // untranslated
Blockly.Msg.THERMISTOR = "10K thermistor";  // untranslated
Blockly.Msg.THREAD_RETURN = "return id";  // untranslated
Blockly.Msg.TILT_SWITCH = "Tilt switch";  // untranslated
Blockly.Msg.TO = "to";  // untranslated
Blockly.Msg.TODAY = "Bugün";
Blockly.Msg.TRUE = "true";  // untranslated
Blockly.Msg.UNARY_BITWISE_HELPURL = "";  // untranslated
Blockly.Msg.UNARY_BITWISE_TOOLTIP = "";  // untranslated
Blockly.Msg.UNDO = "Undo";  // untranslated
Blockly.Msg.UPDATE = "Update";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "element";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "'%1 - i təyin et' - i yarat";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Bu dəyişənin qiymətini qaytarır.";
Blockly.Msg.VARIABLES_SET = "%1 - i bu qiymət ilə təyin et: %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "'%1 - i götür' - ü yarat";
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Bu dəyişəni daxil edilmiş qiymətə bərabər edir.";
Blockly.Msg.VARIABLE_ALREADY_EXISTS = "A variable named '%1' already exists.";  // untranslated
Blockly.Msg.WARNING_CAN_INVALID_DATA = "Invalid data. Must be >= 0 and <= 255.";  // untranslated
Blockly.Msg.WARNING_CAN_INVALID_LEN = "Invalid length. Must be >= 0 and <= 8.";  // untranslated
Blockly.Msg.WARNING_CAN_INVALID_TYPE = "Invalid frame type";  // untranslated
Blockly.Msg.WARNING_CATCH_ERROR_NOT_ALLOWED_HERE = "Warning: This block may only be used within a 'when error is catched' block.";  // untranslated
Blockly.Msg.WARNING_EVENTS_CAN_ONLY_PROCESSED_IN_ONE_EVENT_BLOCK = "Warning: events can only be processed in one event block.";  // untranslated
Blockly.Msg.WARNING_NOT_IN_HAT_BLOCK = "Warning: this block may only be used within a hat block.";  // untranslated
Blockly.Msg.WARNING_ONLY_ONE_INSTANCE_ALLOWED = "Warning: only one instance of this block is allowed.";  // untranslated
Blockly.Msg.WARNING_RAISE_ERROR_AGAIN_NOT_ALLOWED_HERE = "Warning: This block may only be used within a 'try catch finally' block in its catch part.";  // untranslated
Blockly.Msg.WIFI_CONFIG_TITLE = "Wi-Fi contiguration ...";  // untranslated
Blockly.Msg.WIFI_INVALID = "Invalid %1 value.";  // untranslated
Blockly.Msg.WIFI_START = "start Wi-Fi";  // untranslated
Blockly.Msg.WIFI_STOP = "stop Wi-Fi";  // untranslated
Blockly.Msg.WIFI_TYPE = "Type";  // untranslated
Blockly.Msg.WITH = "with";  // untranslated
Blockly.Msg.YES = "Yes";  // untranslated
Blockly.Msg.air_quality = "Air quality";  // untranslated
Blockly.Msg.any = "any";  // untranslated
Blockly.Msg.any_edge = "any edge";  // untranslated
Blockly.Msg.configureLora = "configure LoRa using ";  // untranslated
Blockly.Msg.configureanalogpin = "configure analog pin";  // untranslated
Blockly.Msg.configuredigitalpin = "configure digital pin";  // untranslated
Blockly.Msg.distance = "Distance";  // untranslated
Blockly.Msg.for = "for";  // untranslated
Blockly.Msg.geopos = "Geographic position";  // untranslated
Blockly.Msg.getanalogpin = "get analog pin value";  // untranslated
Blockly.Msg.getdigitalpin = "get digital pin value";  // untranslated
Blockly.Msg.getexternalanalogchannel = "get analog value from";  // untranslated
Blockly.Msg.high_level = "high level";  // untranslated
Blockly.Msg.humidity = "Humidity";  // untranslated
Blockly.Msg.hz = "hz";  // untranslated
Blockly.Msg.i2cAddress = "set address for";  // untranslated
Blockly.Msg.i2cReadFrom = "read from";  // untranslated
Blockly.Msg.i2cSetSpeedFor = "set speed for";  // untranslated
Blockly.Msg.i2cSpeed = "speed";  // untranslated
Blockly.Msg.i2cStartConditionFor = "start condition for";  // untranslated
Blockly.Msg.i2cStopConditionFor = "stop condition for";  // untranslated
Blockly.Msg.i2cWriteTo = "write to";  // untranslated
Blockly.Msg.illuminance = "Illuminance";  // untranslated
Blockly.Msg.invertdigitalpin = "invert digital pin";  // untranslated
Blockly.Msg.liquid_flow = "Liquid flow";  // untranslated
Blockly.Msg.low_level = "low level";  // untranslated
Blockly.Msg.magnetic_field = "Magnetic field";  // untranslated
Blockly.Msg.microseconds = "microseconds";  // untranslated
Blockly.Msg.milliseconds = "milliseconds";  // untranslated
Blockly.Msg.negative_edge = "negative edge";  // untranslated
Blockly.Msg.other = "Other";  // untranslated
Blockly.Msg.positive_edge = "positive edge";  // untranslated
Blockly.Msg.potentiometers = "Potentiometers";  // untranslated
Blockly.Msg.presence = "Presence";  // untranslated
Blockly.Msg.pressure = "Pressure";  // untranslated
Blockly.Msg.read = "read";  // untranslated
Blockly.Msg.rotation = "Rotation";  // untranslated
Blockly.Msg.seconds = "seconds";  // untranslated
Blockly.Msg.setdigitalpin = "set digital pin";  // untranslated
Blockly.Msg.setpwmpin = "set PWM pin";  // untranslated
Blockly.Msg.soil_moisture = "Soil moisture";  // untranslated
Blockly.Msg.switches = "Switches";  // untranslated
Blockly.Msg.temperature = "Temperature";  // untranslated
Blockly.Msg.thread_create = "create thread";  // untranslated
Blockly.Msg.thread_resume = "resume thread";  // untranslated
Blockly.Msg.thread_sleep = "sleep";  // untranslated
Blockly.Msg.thread_start = "start thread";  // untranslated
Blockly.Msg.thread_stop = "stop thread";  // untranslated
Blockly.Msg.thread_suspend = "suspend thread";  // untranslated
Blockly.Msg.uv = "UV";  // untranslated
Blockly.Msg.wait_for = "wait";  // untranslated
Blockly.Msg.write = "write";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;