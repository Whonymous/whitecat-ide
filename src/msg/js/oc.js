// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.oc');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Apondre un comentari";
Blockly.Msg.AM412 = "PIR - AM412";  // untranslated
Blockly.Msg.ANALOG_JOYSTICK = "Analog joystick";  // untranslated
Blockly.Msg.ANALOG_PINS = "analog pin";  // untranslated
Blockly.Msg.AS = "as";  // untranslated
Blockly.Msg.BAND = "band";  // untranslated
Blockly.Msg.BITLOGIC_LSB_HELPURL = "";  // untranslated
Blockly.Msg.BITLOGIC_LSB_TITLE = "LSB %1";  // untranslated
Blockly.Msg.BITLOGIC_LSB_TOOLTIP = "Returns the LSB (less significant byte) of the input.";  // untranslated
Blockly.Msg.BITLOGIC_MSB_HELPURL = "";  // untranslated
Blockly.Msg.BITLOGIC_MSB_TITLE = "MSB %1";  // untranslated
Blockly.Msg.BITLOGIC_MSB_TOOLTIP = "Returns the MSB (most significant byte) of the input.";  // untranslated
Blockly.Msg.BITSOFRESOLUTION = "bits of resolution";  // untranslated
Blockly.Msg.BITWISE_HELPURL = "";  // untranslated
Blockly.Msg.BITWISE_TOOLTIP = "";  // untranslated
Blockly.Msg.CANCEL = "Cancel";  // untranslated
Blockly.Msg.CAN_EXT = "extended";  // untranslated
Blockly.Msg.CAN_FRAME_ALREADY_EXISTS = "An frame named '%1' already exists.";  // untranslated
Blockly.Msg.CAN_FRAME_CANCEL = "Cancel";  // untranslated
Blockly.Msg.CAN_FRAME_CANNOT_REMOVE = "This frame cannot remove.";  // untranslated
Blockly.Msg.CAN_FRAME_CANNOT_RENAME = "This frame cannot rename.";  // untranslated
Blockly.Msg.CAN_FRAME_CREATE = "Creeate frame ...";  // untranslated
Blockly.Msg.CAN_FRAME_NAME = "Frame name";  // untranslated
Blockly.Msg.CAN_GET = "get";  // untranslated
Blockly.Msg.CAN_GET_D0 = "data 0";  // untranslated
Blockly.Msg.CAN_GET_D1 = "data 1";  // untranslated
Blockly.Msg.CAN_GET_D2 = "data 2";  // untranslated
Blockly.Msg.CAN_GET_D3 = "data 3";  // untranslated
Blockly.Msg.CAN_GET_D4 = "data 4";  // untranslated
Blockly.Msg.CAN_GET_D5 = "data 5";  // untranslated
Blockly.Msg.CAN_GET_D6 = "data 6";  // untranslated
Blockly.Msg.CAN_GET_D7 = "data 7";  // untranslated
Blockly.Msg.CAN_GET_FROM_FRAME = "from";  // untranslated
Blockly.Msg.CAN_GET_HELPURL = "Get a field value from a CAN frame.";  // untranslated
Blockly.Msg.CAN_GET_IDENTIFIER = "identifier";  // untranslated
Blockly.Msg.CAN_GET_LEN = "length";  // untranslated
Blockly.Msg.CAN_GET_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_GET_TO_FRAME = "to";  // untranslated
Blockly.Msg.CAN_GET_TYPE = "type";  // untranslated
Blockly.Msg.CAN_READ = "read from ";  // untranslated
Blockly.Msg.CAN_READ_HELPURL = "";  // untranslated
Blockly.Msg.CAN_READ_TOOLTIP = "Read a frame from the CAN bus.";  // untranslated
Blockly.Msg.CAN_SET = "set";  // untranslated
Blockly.Msg.CAN_SET_D0 = "data 0";  // untranslated
Blockly.Msg.CAN_SET_D1 = "data 1";  // untranslated
Blockly.Msg.CAN_SET_D2 = "data 2";  // untranslated
Blockly.Msg.CAN_SET_D3 = "data 3";  // untranslated
Blockly.Msg.CAN_SET_D4 = "data 4";  // untranslated
Blockly.Msg.CAN_SET_D5 = "data 5";  // untranslated
Blockly.Msg.CAN_SET_D6 = "data 6";  // untranslated
Blockly.Msg.CAN_SET_D7 = "data 7";  // untranslated
Blockly.Msg.CAN_SET_FILTER = "set filter for";  // untranslated
Blockly.Msg.CAN_SET_FILTER_FROM = "from";  // untranslated
Blockly.Msg.CAN_SET_FILTER_HELPURL = "Set a filter. Only messages that it's id match the filter are accepted.";  // untranslated
Blockly.Msg.CAN_SET_FILTER_TO = "to";  // untranslated
Blockly.Msg.CAN_SET_FILTER_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_SET_HELPURL = "Set a frame field to an specified value.";  // untranslated
Blockly.Msg.CAN_SET_IDENTIFIER = "identifier";  // untranslated
Blockly.Msg.CAN_SET_LEN = "length";  // untranslated
Blockly.Msg.CAN_SET_SPEED = "set speed for";  // untranslated
Blockly.Msg.CAN_SET_SPEED_HELPURL = "";  // untranslated
Blockly.Msg.CAN_SET_SPEED_TOOLTIP = "Set speed for CAN bus.";  // untranslated
Blockly.Msg.CAN_SET_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_SET_TO_FRAME = "to frame";  // untranslated
Blockly.Msg.CAN_SET_TO_VALUE = "value";  // untranslated
Blockly.Msg.CAN_SET_TYPE = "type";  // untranslated
Blockly.Msg.CAN_STD = "standard";  // untranslated
Blockly.Msg.CAN_TYPE_HELPURL = "";  // untranslated
Blockly.Msg.CAN_TYPE_TOOLTIP = "";  // untranslated
Blockly.Msg.CAN_WRITE = "write to ";  // untranslated
Blockly.Msg.CAN_WRITE_FRAME = "frame";  // untranslated
Blockly.Msg.CAN_WRITE_HELPURL = "Send a frame to the CAN bus.";  // untranslated
Blockly.Msg.CAN_WRITE_TOOLTIP = "";  // untranslated
Blockly.Msg.CHANGE_VALUE_TITLE = "Modificar la valor :";
Blockly.Msg.CLEAN_UP = "Netejar los blòts";
Blockly.Msg.CLOSE = "Close";  // untranslated
Blockly.Msg.COLLAPSE_ALL = "Redusir los blòts";
Blockly.Msg.COLLAPSE_BLOCK = "Redusir lo blòt";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "color 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "color 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "mesclar";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";  // untranslated
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://oc.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";  // untranslated
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
Blockly.Msg.COLOUR_RANDOM_TITLE = "color aleatòria";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Causir una color a l'azard.";
Blockly.Msg.COLOUR_RGB_BLUE = "blau";
Blockly.Msg.COLOUR_RGB_GREEN = "verd";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg.COLOUR_RGB_RED = "roge";
Blockly.Msg.COLOUR_RGB_TITLE = "colorar amb";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";  // untranslated
Blockly.Msg.CONFIGURE = "Configure";  // untranslated
Blockly.Msg.CONFIGURE_LORA = "Configure LoRa...";  // untranslated
Blockly.Msg.CONFIGURE_MQTT = "Configure client...";  // untranslated
Blockly.Msg.CONFIGURE_WIFI = "Configure...";  // untranslated
Blockly.Msg.CONFIGURE_WIFI_STA = "Configure WIFI station...";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";  // untranslated
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg.CONTROLS_FOREACH_TITLE = "per cada element %1 dins la lista %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";  // untranslated
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg.CONTROLS_FOR_TITLE = "comptar amb %1 de %2 a %3 per %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";  // untranslated
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";  // untranslated
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";  // untranslated
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";  // untranslated
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "siquenon";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "siquenon se";
Blockly.Msg.CONTROLS_IF_MSG_IF = "se";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";  // untranslated
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";  // untranslated
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";  // untranslated
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";  // untranslated
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://oc.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "far";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repetir %1 còps";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repetir fins a";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repetir tant que";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";  // untranslated
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";  // untranslated
Blockly.Msg.CPU_SLEEP = "sleep CPU";  // untranslated
Blockly.Msg.CREATE_MQTT = "Configure MQTT client...";  // untranslated
Blockly.Msg.DEFAULT_CAN_FRAME = "frame";  // untranslated
Blockly.Msg.DEFAULT_EVENT = "event";  // untranslated
Blockly.Msg.DELETE_ALL_BLOCKS = "Suprimir totes los %1 blòts ?";
Blockly.Msg.DELETE_BLOCK = "Suprimir lo blòt";
Blockly.Msg.DELETE_CAN_FRAME = "Delete the '%1' frame";  // untranslated
Blockly.Msg.DELETE_EVENT = "Delete the '%1' event";  // untranslated
Blockly.Msg.DELETE_FILE = "Delete";  // untranslated
Blockly.Msg.DELETE_FILE_CONFIRM = "Do you want to delete %1?";  // untranslated
Blockly.Msg.DELETE_SENSOR = "Delete the '%1' sensor";  // untranslated
Blockly.Msg.DELETE_VARIABLE = "Delete the '%1' variable";  // untranslated
Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Delete %1 uses of the '%2' variable?";  // untranslated
Blockly.Msg.DELETE_X_BLOCKS = "Suprimir %1 blòts";
Blockly.Msg.DISABLE_BLOCK = "Desactivar lo blòt";
Blockly.Msg.DO = "do";  // untranslated
Blockly.Msg.DUPLICATE_BLOCK = "Duplicar";
Blockly.Msg.DUTY = "and duty";  // untranslated
Blockly.Msg.EDIT_CAN_FRAME_TITLE = "Edit frame ...";  // untranslated
Blockly.Msg.EDIT_EVENT_TITLE = "Edit event ...";  // untranslated
Blockly.Msg.EDIT_SENSOR = "Edit sensor ...";  // untranslated
Blockly.Msg.EDIT_SENSOR_TITLE = "Edit sensor ...";  // untranslated
Blockly.Msg.ENABLE_BLOCK = "Activar lo blòt";
Blockly.Msg.ERROR = "Error";  // untranslated
Blockly.Msg.EVENT_ALREADY_EXISTS = "An event named '%1' already exists.";  // untranslated
Blockly.Msg.EVENT_BROADCAST = "broadcast";  // untranslated
Blockly.Msg.EVENT_BROADCAST_AND_WAIT = "and wait";  // untranslated
Blockly.Msg.EVENT_BROADCAST_AND_WAIT_TOOLTIP = "Sends a broadcast, activating When I Receive blocks that are set to that broadcast, and pauses until all scripts activated by the broadcast are completed";  // untranslated
Blockly.Msg.EVENT_BROADCAST_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_BROADCAST_TOOLTIP = "Sends a broadcast, activating When I Receive blocks that are set to that broadcast.";  // untranslated
Blockly.Msg.EVENT_CANCEL = "Cancel";  // untranslated
Blockly.Msg.EVENT_CANNOT_REMOVE = "This event cannot remove.";  // untranslated
Blockly.Msg.EVENT_CANNOT_RENAME = "This event cannot rename.";  // untranslated
Blockly.Msg.EVENT_CREATE = "Creeate event ...";  // untranslated
Blockly.Msg.EVENT_EVERY = "every";  // untranslated
Blockly.Msg.EVENT_EVERY_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_EVERY_TOOLTIP = "This block is invoked at regular time intervals.";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED = "is being processed?";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED_P = "";  // untranslated
Blockly.Msg.EVENT_IS_BEING_PROCESSED_TOOLTIP = "";  // untranslated
Blockly.Msg.EVENT_NAME = "Event name";  // untranslated
Blockly.Msg.EVENT_THREAD_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_THREAD_TOOLTIP = "";  // untranslated
Blockly.Msg.EVENT_WHEN_BOARD_STARTS = "when board starts";  // untranslated
Blockly.Msg.EVENT_WHEN_BOARD_STARTS_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_BOARD_STARTS_TOOLTIP = "This block is invoked at board startup. Tipically is used for initialize other blocks, and broadcast events.";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_CHANGES = "changes at";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN = "when digital pin";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN_TOOLTIP = "";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE = "when I receive";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME = "when I receive a LoRa frame";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME_TOOLTIP = "This block is invoked when a LoRa frame is received.";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_HELPURL = "";  // untranslated
Blockly.Msg.EVENT_WHEN_I_RECEIVE_TOOLTIP = "This block will be invoked once the specified broadcast has been sent by an other script.";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_CONNECTED = "when Wi-Fi is connected";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_CONNECTED_TOOLTIP = "This block is invoked when the Wi-Fi connected.";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_DISCONNECTED = "when Wi-Fi is disconnected";  // untranslated
Blockly.Msg.EVENT_WHEN_WIFI_IS_DISCONNECTED_TOOLTIP = "This block is invoked when the Wi-Fi disconnected.";  // untranslated
Blockly.Msg.EXPAND_ALL = "Desvolopar los blòts";
Blockly.Msg.EXPAND_BLOCK = "Desvolopar lo blòt";
Blockly.Msg.EXTERNAL_INPUTS = "Entradas extèrnas";
Blockly.Msg.FALSE = "false";  // untranslated
Blockly.Msg.FILE_DELETED = "%1 has been deleted.";  // untranslated
Blockly.Msg.FOREVER = "forever";  // untranslated
Blockly.Msg.FREQUENCY = "to frequency";  // untranslated
Blockly.Msg.GPS = "NMEA GPS";  // untranslated
Blockly.Msg.HALL_FLOW = "Flow by hall effect";  // untranslated
Blockly.Msg.HALL_SWITCH = "Hall effect switch";  // untranslated
Blockly.Msg.HELP = "Ajuda";
Blockly.Msg.HERTZS = "hertzs";  // untranslated
Blockly.Msg.HIGH = "high";  // untranslated
Blockly.Msg.IN = "in";  // untranslated
Blockly.Msg.INLINE_INPUTS = "Entradas en linha";
Blockly.Msg.INPUT = "input";  // untranslated
Blockly.Msg.INPUT_PINS = "input pin";  // untranslated
Blockly.Msg.INTERNAL_HALL = "Internal hall effect sensor";  // untranslated
Blockly.Msg.Khz = "Khz";  // untranslated
Blockly.Msg.LINEAR_POT = "Linear pot";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";  // untranslated
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "crear una lista amb";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";  // untranslated
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_FIRST = "primièr";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# dempuèi la fin";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_GET = "obténer";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obténer e suprimir";
Blockly.Msg.LISTS_GET_INDEX_LAST = "darrièr";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aleatòri";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "suprimit";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Returns the item at the specified position in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Removes and returns the item at the specified position in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Removes the item at the specified position in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "fins a # dempuèi la fin";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "fins a #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "fins a la fin";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";  // untranslated
Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "%1 is the last item.";  // untranslated
Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 is the first item.";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";  // untranslated
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";  // untranslated
Blockly.Msg.LISTS_INLIST = "dins la lista";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";  // untranslated
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";  // untranslated
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";  // untranslated
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";  // untranslated
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";  // untranslated
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "coma";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "inserir en";
Blockly.Msg.LISTS_SET_INDEX_SET = "metre";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Inserts the item at the specified position in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Sets the item at the specified position in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";  // untranslated
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";  // untranslated
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";  // untranslated
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "creissent";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descreissent";
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";  // untranslated
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";  // untranslated
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alfabetic";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";  // untranslated
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "fals";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";  // untranslated
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "verai";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";  // untranslated
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";  // untranslated
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg.LOGIC_NEGATE_TITLE = "pas %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";  // untranslated
Blockly.Msg.LOGIC_NULL = "nul";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Renvia nul.";
Blockly.Msg.LOGIC_OPERATION_AND = "e";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg.LOGIC_OPERATION_OR = "o";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";  // untranslated
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";  // untranslated
Blockly.Msg.LOGIC_TERNARY_CONDITION = "tèst";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "se fals";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "se verai";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";  // untranslated
Blockly.Msg.LORA_ACTIVATION = "Activation";  // untranslated
Blockly.Msg.LORA_ACTIVATION_DATA = "Node activation data:";  // untranslated
Blockly.Msg.LORA_ADR = "Adaptative Data Rate";  // untranslated
Blockly.Msg.LORA_BAND = "Band";  // untranslated
Blockly.Msg.LORA_CONFIG_RETX = "Retransmissions";  // untranslated
Blockly.Msg.LORA_CONFIG_TITLE = "LoRa WAN configuration ...";  // untranslated
Blockly.Msg.LORA_CONFIRMED = "confirmed";  // untranslated
Blockly.Msg.LORA_DR = "Data Rate";  // untranslated
Blockly.Msg.LORA_FRAME = " frame to port ";  // untranslated
Blockly.Msg.LORA_FREQ = "Frequency";  // untranslated
Blockly.Msg.LORA_GATEWAY = "1-channel gateway";  // untranslated
Blockly.Msg.LORA_GET_ABP_DATA_HELP = "The Whitecat IDE offer to its users a TTN LoRa WAN application for test an ABP node. If you want to use it, please click the 'Get data' button to get the personalization data.";  // untranslated
Blockly.Msg.LORA_GET_DATA = "Get data ...";  // untranslated
Blockly.Msg.LORA_GET_OTAA_DATA_HELP = "The Whitecat IDE offer to its users a TTN LoRa WAN application for test an OTAA node. If you want to use it, please click the 'Get data' button to get the activation data.";  // untranslated
Blockly.Msg.LORA_GET_PAYLOAD = "get payload from received frame";  // untranslated
Blockly.Msg.LORA_GET_PORT = "get port from received frame";  // untranslated
Blockly.Msg.LORA_INVALID = "Invalid %1 value.";  // untranslated
Blockly.Msg.LORA_JOIN = "join";  // untranslated
Blockly.Msg.LORA_NODE = "Node";  // untranslated
Blockly.Msg.LORA_PAYLOAD = " with payload ";  // untranslated
Blockly.Msg.LORA_PERSONALIZATION_DATA = "Node personalization data:";  // untranslated
Blockly.Msg.LORA_ROLE = "Role";  // untranslated
Blockly.Msg.LORA_ROLE_GATEWAY_TITLE = "Gateway configuration:";  // untranslated
Blockly.Msg.LORA_ROLE_NODE_TITLE = "Basic node configuration:";  // untranslated
Blockly.Msg.LORA_SET_ADR = "set adaptative data rate to";  // untranslated
Blockly.Msg.LORA_SET_APPEUI = "set AppEui to";  // untranslated
Blockly.Msg.LORA_SET_APPKEY = "set AppKey to";  // untranslated
Blockly.Msg.LORA_SET_APPSKEY = "set setAppsKey to";  // untranslated
Blockly.Msg.LORA_SET_AR = "set automatic reply to";  // untranslated
Blockly.Msg.LORA_SET_DEVADDR = "set DevAddr to";  // untranslated
Blockly.Msg.LORA_SET_DEVEUI = "set DevEui to";  // untranslated
Blockly.Msg.LORA_SET_DR = "set data rate to";  // untranslated
Blockly.Msg.LORA_SET_NWKSKEY = "set NwksKey to";  // untranslated
Blockly.Msg.LORA_SET_RETX = "set retransmissions to";  // untranslated
Blockly.Msg.LORA_START_GW = "start gateway";  // untranslated
Blockly.Msg.LORA_STOP_GW = "stop gateway";  // untranslated
Blockly.Msg.LORA_TX = "transmit ";  // untranslated
Blockly.Msg.LORA_UNCONFIRMED = "unconfirmed";  // untranslated
Blockly.Msg.LOW = "low";  // untranslated
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://oc.wikipedia.org/wiki/Aritmetica";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";  // untranslated
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";  // untranslated
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";  // untranslated
Blockly.Msg.MATH_CHANGE_TITLE = "incrementar %1 per %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";  // untranslated
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";  // untranslated
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";  // untranslated
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";  // untranslated
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "es devesible per";
Blockly.Msg.MATH_IS_EVEN = "es par";
Blockly.Msg.MATH_IS_NEGATIVE = "es negatiu";
Blockly.Msg.MATH_IS_ODD = "es impar";
Blockly.Msg.MATH_IS_POSITIVE = "es positiu";
Blockly.Msg.MATH_IS_PRIME = "es primièr";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";  // untranslated
Blockly.Msg.MATH_IS_WHOLE = "es entièr";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";  // untranslated
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";  // untranslated
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";  // untranslated
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
Blockly.Msg.MATH_NUMBER_HELPURL = "https://oc.wikipedia.org/wiki/Nombre";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un nombre.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "mejana de la lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "maximum de la lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana de la lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "minimum de la lista";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";  // untranslated
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "soma de la lista";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";  // untranslated
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";  // untranslated
Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";  // untranslated
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";  // untranslated
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";  // untranslated
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";  // untranslated
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "arredondir";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "arredondir a l’inferior";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "arredondir al superior";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";  // untranslated
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";  // untranslated
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolut";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "raiç carrada";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";  // untranslated
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";  // untranslated
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";  // untranslated
Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";  // untranslated
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";  // untranslated
Blockly.Msg.MHZ = "MHz";  // untranslated
Blockly.Msg.MQTT_CONFIG_TITLE = "Configure MQTT client ...";  // untranslated
Blockly.Msg.MQTT_GET_DATA = "Get data ...";  // untranslated
Blockly.Msg.MQTT_GET_DATA_HELP = "The Whitecat IDE offer to its users a MQTT broquer for testing purposes. If you want to use it, please click the 'Get data' button to get the connection data.";  // untranslated
Blockly.Msg.MQTT_GET_LEN = "get length of the received message";  // untranslated
Blockly.Msg.MQTT_GET_PAYLOAD = "get the received message";  // untranslated
Blockly.Msg.MQTT_INVALID = "Invalid value %1.";  // untranslated
Blockly.Msg.MQTT_PUBLISH = "publish";  // untranslated
Blockly.Msg.MQTT_QOS = "with";  // untranslated
Blockly.Msg.MQTT_SUBSCRIBE = "when a message is received to topic";  // untranslated
Blockly.Msg.MQTT_TO_TOPIC = "to topic";  // untranslated
Blockly.Msg.NEW_CAN_FRAME = "New frame ...";  // untranslated
Blockly.Msg.NEW_CAN_FRAME_TITLE = "New frame ...";  // untranslated
Blockly.Msg.NEW_EVENT = "New event ...";  // untranslated
Blockly.Msg.NEW_EVENT_TITLE = "New event ...";  // untranslated
Blockly.Msg.NEW_SENSOR = "Create new sensor...";  // untranslated
Blockly.Msg.NEW_SENSOR_SELECT_ONE = "(select one)";  // untranslated
Blockly.Msg.NEW_SENSOR_TITLE = "New sensor ...";  // untranslated
Blockly.Msg.NEW_VARIABLE = "Crear una variabla...";
Blockly.Msg.NEW_VARIABLE_TITLE = "Nom de la novèla variabla :";
Blockly.Msg.NO = "No";  // untranslated
Blockly.Msg.ONLY_ALLOWED_WITHIN_BLOCK = "Warning: This block may only be used within a \"%1\" block";  // untranslated
Blockly.Msg.ON_EVERY_RECEIVED_LORA_FRAME = "a LoRa WAN frame is received";  // untranslated
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
Blockly.Msg.OUTPUT = "output";  // untranslated
Blockly.Msg.OUTPUT_PINS = "output pin";  // untranslated
Blockly.Msg.PERCENT = "%";  // untranslated
Blockly.Msg.PING28015 = "PING))) 28015";  // untranslated
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";  // untranslated
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "amb :";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";  // untranslated
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";  // untranslated
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "amb :";
Blockly.Msg.PROCEDURES_CREATE_DO = "Crear '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "far quicòm";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "a";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "retorn";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";  // untranslated
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";  // untranslated
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";  // untranslated
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nom de l’entrada :";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";  // untranslated
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "entradas";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";  // untranslated
Blockly.Msg.PUSH_SWITCH = "Push switch";  // untranslated
Blockly.Msg.PWM_PINS = "pwm pin";  // untranslated
Blockly.Msg.REDO = "Refar";
Blockly.Msg.REL_ROT_ENCODER = "Relative rotary encoder";  // untranslated
Blockly.Msg.REMOVE_COMMENT = "Suprimir un comentari";
Blockly.Msg.REMOVE_SENSOR = "Remove sensor ...";  // untranslated
Blockly.Msg.RENAME_CAN_FRAME = "Rename frame...";  // untranslated
Blockly.Msg.RENAME_EVENT = "Rename event...";  // untranslated
Blockly.Msg.RENAME_SENSOR = "Renane sensor ...";  // untranslated
Blockly.Msg.RENAME_VARIABLE = "Renomenar la variabla…";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Renomenar totas las variablas '%1' a :";
Blockly.Msg.S2Y0A21 = "Sharp 2Y0A21";  // untranslated
Blockly.Msg.SENSOR = "Sensor";  // untranslated
Blockly.Msg.SENSOR_ACQUIRE = "acquire data from %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_ACQUIRE_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_ACQUIRE_TOOLTIP = "Acquire data from sensor.";  // untranslated
Blockly.Msg.SENSOR_ALREADY_EXISTS = "A sensor named '%1' already exists.";  // untranslated
Blockly.Msg.SENSOR_ATTACH = "attach %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_ATTACH_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_ATTACH_TOOLTIP = "Attach sensor to its hardware interface.";  // untranslated
Blockly.Msg.SENSOR_CANCEL = "Cancel";  // untranslated
Blockly.Msg.SENSOR_CATEGORY = "Category";  // untranslated
Blockly.Msg.SENSOR_CREATE = "Create";  // untranslated
Blockly.Msg.SENSOR_DEFAULT_NAME = "sensor";  // untranslated
Blockly.Msg.SENSOR_DEVICE_ADDR = "Adress on bus";  // untranslated
Blockly.Msg.SENSOR_DEVICE_ID = "Identifier on bus";  // untranslated
Blockly.Msg.SENSOR_DISCOVER = "Discover on bus";  // untranslated
Blockly.Msg.SENSOR_INT_ATTACHED = "%1 attached at";  // untranslated
Blockly.Msg.SENSOR_NAME = "Name in the workspace";  // untranslated
Blockly.Msg.SENSOR_READ1 = "read ";  // untranslated
Blockly.Msg.SENSOR_READ2 = " from %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_READ_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_READ_TOOLTIP = "Read data from sensor.";  // untranslated
Blockly.Msg.SENSOR_REMOVE_CONFIRM = "Do you want to remove %1 sensor from your project?";  // untranslated
Blockly.Msg.SENSOR_SET1 = "set ";  // untranslated
Blockly.Msg.SENSOR_SET2 = " with value ";  // untranslated
Blockly.Msg.SENSOR_SET3 = " for %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_SET_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_SET_TOOLTIP = "Set configuration options for sensor.";  // untranslated
Blockly.Msg.SENSOR_WHEN1 = "when ";  // untranslated
Blockly.Msg.SENSOR_WHEN2 = " changes from %1 (%2)";  // untranslated
Blockly.Msg.SENSOR_WHEN_HELPURL = "";  // untranslated
Blockly.Msg.SENSOR_WHEN_TOOLTIP = "This block is invoked when the magnitude changes.";  // untranslated
Blockly.Msg.SERVO_ATTACH = "attach servo on pin";  // untranslated
Blockly.Msg.SERVO_ATTACH_HELPURL = "";  // untranslated
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach a servo to a pin.";  // untranslated
Blockly.Msg.SERVO_CALIBRATE = "Calibrate ...";  // untranslated
Blockly.Msg.SERVO_MOVE = "move servo on pin";  // untranslated
Blockly.Msg.SERVO_MOVE_DEGREES = "degrees";  // untranslated
Blockly.Msg.SERVO_MOVE_HELPURL = "";  // untranslated
Blockly.Msg.SERVO_MOVE_TOOLTIP = "Moves the servo attached on pin by a number of degrees. If degrees are > 0 movement is clockwise, and if movement is < 0 movement is counterclockwise";  // untranslated
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "apondre lo tèxte";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_APPEND_TO = "a";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";  // untranslated
Blockly.Msg.TEXT_CATCH_TITLE = "catch";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "en minusculas";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";  // untranslated
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "en MAJUSCULAS";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";  // untranslated
Blockly.Msg.TEXT_CHARAT_FIRST = "obténer la primièra letra";
Blockly.Msg.TEXT_CHARAT_FROM_END = "obténer la letra # dempuèi la fin";
Blockly.Msg.TEXT_CHARAT_FROM_START = "obténer la letra #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "dins lo tèxte";
Blockly.Msg.TEXT_CHARAT_LAST = "obténer la darrièra letra";
Blockly.Msg.TEXT_CHARAT_RANDOM = "obténer una letra a l'azard";
Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Renvia la letra a la posicion indicada.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";  // untranslated
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "jónher";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";  // untranslated
Blockly.Msg.TEXT_FINALLY = "finally";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "fins a la letra #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "dins lo tèxte";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";  // untranslated
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "dins lo tèxte";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TAIL = "";  // untranslated
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 es void";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";  // untranslated
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";  // untranslated
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";  // untranslated
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg.TEXT_LENGTH_TITLE = "longor de %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";  // untranslated
Blockly.Msg.TEXT_PACK_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_PACK_TITLE1 = "pack hex string";  // untranslated
Blockly.Msg.TEXT_PACK_TITLE2 = "with";  // untranslated
Blockly.Msg.TEXT_PACK_TITLE3 = "to";  // untranslated
Blockly.Msg.TEXT_PACK_TOOLTIP = "Pack a set of values into an hex's string representation.";  // untranslated
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg.TEXT_PRINT_TITLE = "afichar %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";  // untranslated
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";  // untranslated
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";  // untranslated
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";  // untranslated
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";  // untranslated
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";  // untranslated
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";  // untranslated
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";  // untranslated
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";  // untranslated
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";  // untranslated
Blockly.Msg.TEXT_TRY_CATCHED = "is catched";  // untranslated
Blockly.Msg.TEXT_TRY_CATCH_ERROR = "when error";  // untranslated
Blockly.Msg.TEXT_TRY_CATCH_OTHER_ERROR = "when other errors catched";  // untranslated
Blockly.Msg.TEXT_TRY_CATCH_RAISE_AGAIN = "raise catched error again";  // untranslated
Blockly.Msg.TEXT_TRY_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_TRY_TITLE = "try";  // untranslated
Blockly.Msg.TEXT_TRY_TOOLTIP = "Try to execute a set of statements and eventualy catch the errors without stop program.";  // untranslated
Blockly.Msg.TEXT_UNPACK_HELPURL = "";  // untranslated
Blockly.Msg.TEXT_UNPACK_TITLE1 = "unpack hex string";  // untranslated
Blockly.Msg.TEXT_UNPACK_TITLE2 = "to";  // untranslated
Blockly.Msg.TEXT_UNPACK_TITLE3 = "from";  // untranslated
Blockly.Msg.TEXT_UNPACK_TOOLTIP = "Unpack a set of values encoded into an hex's string representation.";  // untranslated
Blockly.Msg.THERMISTOR = "10K thermistor";  // untranslated
Blockly.Msg.THREAD_RETURN = "return id";  // untranslated
Blockly.Msg.TILT_SWITCH = "Tilt switch";  // untranslated
Blockly.Msg.TO = "to";  // untranslated
Blockly.Msg.TODAY = "Uèi";
Blockly.Msg.TRUE = "true";  // untranslated
Blockly.Msg.UNARY_BITWISE_HELPURL = "";  // untranslated
Blockly.Msg.UNARY_BITWISE_TOOLTIP = "";  // untranslated
Blockly.Msg.UNDO = "Anullar";
Blockly.Msg.UPDATE = "Update";  // untranslated
Blockly.Msg.VARIABLES_DEFAULT_NAME = "element";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Crear 'fixar %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";  // untranslated
Blockly.Msg.VARIABLES_SET = "fixar %1 a %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";  // untranslated
Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";  // untranslated
Blockly.Msg.VARIABLE_ALREADY_EXISTS = "A variable named '%1' already exists.";  // untranslated
Blockly.Msg.WARNING_CAN_INVALID_DATA = "Invalid data. Must be >= 0 and <= 255.";  // untranslated
Blockly.Msg.WARNING_CAN_INVALID_LEN = "Invalid length. Must be >= 0 and <= 8.";  // untranslated
Blockly.Msg.WARNING_CAN_INVALID_TYPE = "Invalid frame type";  // untranslated
Blockly.Msg.WARNING_CATCH_ERROR_NOT_ALLOWED_HERE = "Warning: This block may only be used within a 'when error is catched' block.";  // untranslated
Blockly.Msg.WARNING_EVENTS_CAN_ONLY_PROCESSED_IN_ONE_EVENT_BLOCK = "Warning: events can only be processed in one event block.";  // untranslated
Blockly.Msg.WARNING_NOT_IN_HAT_BLOCK = "Warning: this block may only be used within a hat block.";  // untranslated
Blockly.Msg.WARNING_ONLY_ONE_INSTANCE_ALLOWED = "Warning: only one instance of this block is allowed.";  // untranslated
Blockly.Msg.WARNING_RAISE_ERROR_AGAIN_NOT_ALLOWED_HERE = "Warning: This block may only be used within a 'try catch finally' block in its catch part.";  // untranslated
Blockly.Msg.WIFI_CONFIG_TITLE = "Wi-Fi contiguration ...";  // untranslated
Blockly.Msg.WIFI_INVALID = "Invalid %1 value.";  // untranslated
Blockly.Msg.WIFI_START = "start Wi-Fi";  // untranslated
Blockly.Msg.WIFI_STOP = "stop Wi-Fi";  // untranslated
Blockly.Msg.WIFI_TYPE = "Type";  // untranslated
Blockly.Msg.WITH = "with";  // untranslated
Blockly.Msg.YES = "Yes";  // untranslated
Blockly.Msg.air_quality = "Air quality";  // untranslated
Blockly.Msg.any = "any";  // untranslated
Blockly.Msg.any_edge = "any edge";  // untranslated
Blockly.Msg.configureLora = "configure LoRa using ";  // untranslated
Blockly.Msg.configureanalogpin = "configure analog pin";  // untranslated
Blockly.Msg.configuredigitalpin = "configure digital pin";  // untranslated
Blockly.Msg.distance = "Distance";  // untranslated
Blockly.Msg.for = "for";  // untranslated
Blockly.Msg.geopos = "Geographic position";  // untranslated
Blockly.Msg.getanalogpin = "get analog pin value";  // untranslated
Blockly.Msg.getdigitalpin = "get digital pin value";  // untranslated
Blockly.Msg.getexternalanalogchannel = "get analog value from";  // untranslated
Blockly.Msg.high_level = "high level";  // untranslated
Blockly.Msg.humidity = "Humidity";  // untranslated
Blockly.Msg.hz = "hz";  // untranslated
Blockly.Msg.i2cAddress = "set address for";  // untranslated
Blockly.Msg.i2cReadFrom = "read from";  // untranslated
Blockly.Msg.i2cSetSpeedFor = "set speed for";  // untranslated
Blockly.Msg.i2cSpeed = "speed";  // untranslated
Blockly.Msg.i2cStartConditionFor = "start condition for";  // untranslated
Blockly.Msg.i2cStopConditionFor = "stop condition for";  // untranslated
Blockly.Msg.i2cWriteTo = "write to";  // untranslated
Blockly.Msg.illuminance = "Illuminance";  // untranslated
Blockly.Msg.invertdigitalpin = "invert digital pin";  // untranslated
Blockly.Msg.liquid_flow = "Liquid flow";  // untranslated
Blockly.Msg.low_level = "low level";  // untranslated
Blockly.Msg.magnetic_field = "Magnetic field";  // untranslated
Blockly.Msg.microseconds = "microseconds";  // untranslated
Blockly.Msg.milliseconds = "milliseconds";  // untranslated
Blockly.Msg.negative_edge = "negative edge";  // untranslated
Blockly.Msg.other = "Other";  // untranslated
Blockly.Msg.positive_edge = "positive edge";  // untranslated
Blockly.Msg.potentiometers = "Potentiometers";  // untranslated
Blockly.Msg.presence = "Presence";  // untranslated
Blockly.Msg.pressure = "Pressure";  // untranslated
Blockly.Msg.read = "read";  // untranslated
Blockly.Msg.rotation = "Rotation";  // untranslated
Blockly.Msg.seconds = "seconds";  // untranslated
Blockly.Msg.setdigitalpin = "set digital pin";  // untranslated
Blockly.Msg.setpwmpin = "set PWM pin";  // untranslated
Blockly.Msg.soil_moisture = "Soil moisture";  // untranslated
Blockly.Msg.switches = "Switches";  // untranslated
Blockly.Msg.temperature = "Temperature";  // untranslated
Blockly.Msg.thread_create = "create thread";  // untranslated
Blockly.Msg.thread_resume = "resume thread";  // untranslated
Blockly.Msg.thread_sleep = "sleep";  // untranslated
Blockly.Msg.thread_start = "start thread";  // untranslated
Blockly.Msg.thread_stop = "stop thread";  // untranslated
Blockly.Msg.thread_suspend = "suspend thread";  // untranslated
Blockly.Msg.uv = "UV";  // untranslated
Blockly.Msg.wait_for = "wait";  // untranslated
Blockly.Msg.write = "write";  // untranslated
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;