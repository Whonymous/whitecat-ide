// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.en');

goog.require('Blockly.Msg');

Blockly.Msg.ADD_COMMENT = "Add Comment";
Blockly.Msg.AM412 = "PIR - AM412";
Blockly.Msg.ANALOG_JOYSTICK = "Analog joystick";
Blockly.Msg.ANALOG_PINS = "analog pin";
Blockly.Msg.AS = "as";
Blockly.Msg.BAND = "band";
Blockly.Msg.BITLOGIC_LSB_HELPURL = "";
Blockly.Msg.BITLOGIC_LSB_TITLE = "LSB %1";
Blockly.Msg.BITLOGIC_LSB_TOOLTIP = "Returns the LSB (less significant byte) of the input.";
Blockly.Msg.BITLOGIC_MSB_HELPURL = "";
Blockly.Msg.BITLOGIC_MSB_TITLE = "MSB %1";
Blockly.Msg.BITLOGIC_MSB_TOOLTIP = "Returns the MSB (most significant byte) of the input.";
Blockly.Msg.BITSOFRESOLUTION = "bits of resolution";
Blockly.Msg.BITWISE_HELPURL = "";
Blockly.Msg.BITWISE_TOOLTIP = "";
Blockly.Msg.CANCEL = "Cancel";
Blockly.Msg.CAN_EXT = "extended";
Blockly.Msg.CAN_FRAME_ALREADY_EXISTS = "An frame named '%1' already exists.";
Blockly.Msg.CAN_FRAME_CANCEL = "Cancel";
Blockly.Msg.CAN_FRAME_CANNOT_REMOVE = "This frame cannot remove.";
Blockly.Msg.CAN_FRAME_CANNOT_RENAME = "This frame cannot rename.";
Blockly.Msg.CAN_FRAME_CREATE = "Creeate frame ...";
Blockly.Msg.CAN_FRAME_NAME = "Frame name";
Blockly.Msg.CAN_GET = "get";
Blockly.Msg.CAN_GET_D0 = "data 0";
Blockly.Msg.CAN_GET_D1 = "data 1";
Blockly.Msg.CAN_GET_D2 = "data 2";
Blockly.Msg.CAN_GET_D3 = "data 3";
Blockly.Msg.CAN_GET_D4 = "data 4";
Blockly.Msg.CAN_GET_D5 = "data 5";
Blockly.Msg.CAN_GET_D6 = "data 6";
Blockly.Msg.CAN_GET_D7 = "data 7";
Blockly.Msg.CAN_GET_FROM_FRAME = "from";
Blockly.Msg.CAN_GET_HELPURL = "Get a field value from a CAN frame.";
Blockly.Msg.CAN_GET_IDENTIFIER = "identifier";
Blockly.Msg.CAN_GET_LEN = "length";
Blockly.Msg.CAN_GET_TOOLTIP = "";
Blockly.Msg.CAN_GET_TO_FRAME = "to";
Blockly.Msg.CAN_GET_TYPE = "type";
Blockly.Msg.CAN_READ = "read from ";
Blockly.Msg.CAN_READ_HELPURL = "";
Blockly.Msg.CAN_READ_TOOLTIP = "Read a frame from the CAN bus.";
Blockly.Msg.CAN_SET = "set";
Blockly.Msg.CAN_SET_D0 = "data 0";
Blockly.Msg.CAN_SET_D1 = "data 1";
Blockly.Msg.CAN_SET_D2 = "data 2";
Blockly.Msg.CAN_SET_D3 = "data 3";
Blockly.Msg.CAN_SET_D4 = "data 4";
Blockly.Msg.CAN_SET_D5 = "data 5";
Blockly.Msg.CAN_SET_D6 = "data 6";
Blockly.Msg.CAN_SET_D7 = "data 7";
Blockly.Msg.CAN_SET_FILTER = "set filter for";
Blockly.Msg.CAN_SET_FILTER_FROM = "from";
Blockly.Msg.CAN_SET_FILTER_HELPURL = "Set a filter. Only messages that it's id match the filter are accepted.";
Blockly.Msg.CAN_SET_FILTER_TO = "to";
Blockly.Msg.CAN_SET_FILTER_TOOLTIP = "";
Blockly.Msg.CAN_SET_HELPURL = "Set a frame field to an specified value.";
Blockly.Msg.CAN_SET_IDENTIFIER = "identifier";
Blockly.Msg.CAN_SET_LEN = "length";
Blockly.Msg.CAN_SET_SPEED = "set speed for";
Blockly.Msg.CAN_SET_SPEED_HELPURL = "";
Blockly.Msg.CAN_SET_SPEED_TOOLTIP = "Set speed for CAN bus.";
Blockly.Msg.CAN_SET_TOOLTIP = "";
Blockly.Msg.CAN_SET_TO_FRAME = "to frame";
Blockly.Msg.CAN_SET_TO_VALUE = "value";
Blockly.Msg.CAN_SET_TYPE = "type";
Blockly.Msg.CAN_STD = "standard";
Blockly.Msg.CAN_TYPE_HELPURL = "";
Blockly.Msg.CAN_TYPE_TOOLTIP = "";
Blockly.Msg.CAN_WRITE = "write to ";
Blockly.Msg.CAN_WRITE_FRAME = "frame";
Blockly.Msg.CAN_WRITE_HELPURL = "Send a frame to the CAN bus.";
Blockly.Msg.CAN_WRITE_TOOLTIP = "";
Blockly.Msg.CHANGE_VALUE_TITLE = "Change value:";
Blockly.Msg.CLEAN_UP = "Clean up Blocks";
Blockly.Msg.CLOSE = "Close";
Blockly.Msg.COLLAPSE_ALL = "Collapse Blocks";
Blockly.Msg.COLLAPSE_BLOCK = "Collapse Block";
Blockly.Msg.COLOUR_BLEND_COLOUR1 = "colour 1";
Blockly.Msg.COLOUR_BLEND_COLOUR2 = "colour 2";
Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg.COLOUR_BLEND_RATIO = "ratio";
Blockly.Msg.COLOUR_BLEND_TITLE = "blend";
Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Blends two colours together with a given ratio (0.0 - 1.0).";
Blockly.Msg.COLOUR_PICKER_HELPURL = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Choose a colour from the palette.";
Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";
Blockly.Msg.COLOUR_RANDOM_TITLE = "random colour";
Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Choose a colour at random.";
Blockly.Msg.COLOUR_RGB_BLUE = "blue";
Blockly.Msg.COLOUR_RGB_GREEN = "green";
Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg.COLOUR_RGB_RED = "red";
Blockly.Msg.COLOUR_RGB_TITLE = "colour with";
Blockly.Msg.COLOUR_RGB_TOOLTIP = "Create a colour with the specified amount of red, green, and blue. All values must be between 0 and 100.";
Blockly.Msg.CONFIGURE = "Configure";
Blockly.Msg.CONFIGURE_LORA = "Configure LoRa...";
Blockly.Msg.CONFIGURE_MQTT = "Configure client...";
Blockly.Msg.CONFIGURE_WIFI = "Configure...";
Blockly.Msg.CONFIGURE_WIFI_STA = "Configure WIFI station...";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "break out of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continue with next iteration of loop";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Break out of the containing loop.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Skip the rest of this loop, and continue with the next iteration.";
Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Warning: This block may only be used within a loop.";
Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";
Blockly.Msg.CONTROLS_FOREACH_TITLE = "for each item %1 in list %2";
Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "For each item in a list, set the variable '%1' to the item, and then do some statements.";
Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";
Blockly.Msg.CONTROLS_FOR_TITLE = "count with %1 from %2 to %3 by %4";
Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Have the variable '%1' take on the values from the start number to the end number, counting by the specified interval, and do the specified blocks.";
Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Add a condition to the if block.";
Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Add a final, catch-all condition to the if block.";
Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";
Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Add, remove, or reorder sections to reconfigure this if block.";
Blockly.Msg.CONTROLS_IF_MSG_ELSE = "else";
Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "else if";
Blockly.Msg.CONTROLS_IF_MSG_IF = "if";
Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "If a value is true, then do some statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "If a value is true, then do the first block of statements. Otherwise, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements.";
Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "If the first value is true, then do the first block of statements. Otherwise, if the second value is true, do the second block of statements. If none of the values are true, do the last block of statements.";
Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "do";
Blockly.Msg.CONTROLS_REPEAT_TITLE = "repeat %1 times";
Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Do some statements several times.";
Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repeat until";
Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repeat while";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "While a value is false, then do some statements.";
Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "While a value is true, then do some statements.";
Blockly.Msg.CPU_SLEEP = "sleep CPU";
Blockly.Msg.CREATE_MQTT = "Configure MQTT client...";
Blockly.Msg.DEFAULT_CAN_FRAME = "frame";
Blockly.Msg.DEFAULT_EVENT = "event";
Blockly.Msg.DELETE_ALL_BLOCKS = "Delete all %1 blocks?";
Blockly.Msg.DELETE_BLOCK = "Delete Block";
Blockly.Msg.DELETE_CAN_FRAME = "Delete the '%1' frame";
Blockly.Msg.DELETE_EVENT = "Delete the '%1' event";
Blockly.Msg.DELETE_FILE = "Delete";
Blockly.Msg.DELETE_FILE_CONFIRM = "Do you want to delete %1?";
Blockly.Msg.DELETE_SENSOR = "Delete the '%1' sensor";
Blockly.Msg.DELETE_VARIABLE = "Delete the '%1' variable";
Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Delete %1 uses of the '%2' variable?";
Blockly.Msg.DELETE_X_BLOCKS = "Delete %1 Blocks";
Blockly.Msg.DISABLE_BLOCK = "Disable Block";
Blockly.Msg.DO = "do";
Blockly.Msg.DUPLICATE_BLOCK = "Duplicate";
Blockly.Msg.DUTY = "and duty";
Blockly.Msg.EDIT_CAN_FRAME_TITLE = "Edit frame ...";
Blockly.Msg.EDIT_EVENT_TITLE = "Edit event ...";
Blockly.Msg.EDIT_SENSOR = "Edit sensor ...";
Blockly.Msg.EDIT_SENSOR_TITLE = "Edit sensor ...";
Blockly.Msg.ENABLE_BLOCK = "Enable Block";
Blockly.Msg.ERROR = "Error";
Blockly.Msg.EVENT_ALREADY_EXISTS = "An event named '%1' already exists.";
Blockly.Msg.EVENT_BROADCAST = "broadcast";
Blockly.Msg.EVENT_BROADCAST_AND_WAIT = "and wait";
Blockly.Msg.EVENT_BROADCAST_AND_WAIT_TOOLTIP = "Sends a broadcast, activating When I Receive blocks that are set to that broadcast, and pauses until all scripts activated by the broadcast are completed";
Blockly.Msg.EVENT_BROADCAST_HELPURL = "";
Blockly.Msg.EVENT_BROADCAST_TOOLTIP = "Sends a broadcast, activating When I Receive blocks that are set to that broadcast.";
Blockly.Msg.EVENT_CANCEL = "Cancel";
Blockly.Msg.EVENT_CANNOT_REMOVE = "This event cannot remove.";
Blockly.Msg.EVENT_CANNOT_RENAME = "This event cannot rename.";
Blockly.Msg.EVENT_CREATE = "Creeate event ...";
Blockly.Msg.EVENT_EVERY = "every";
Blockly.Msg.EVENT_EVERY_HELPURL = "";
Blockly.Msg.EVENT_EVERY_TOOLTIP = "This block is invoked at regular time intervals.";
Blockly.Msg.EVENT_IS_BEING_PROCESSED = "is being processed?";
Blockly.Msg.EVENT_IS_BEING_PROCESSED_HELPURL = "";
Blockly.Msg.EVENT_IS_BEING_PROCESSED_P = "";
Blockly.Msg.EVENT_IS_BEING_PROCESSED_TOOLTIP = "";
Blockly.Msg.EVENT_NAME = "Event name";
Blockly.Msg.EVENT_THREAD_HELPURL = "";
Blockly.Msg.EVENT_THREAD_TOOLTIP = "";
Blockly.Msg.EVENT_WHEN_BOARD_STARTS = "when board starts";
Blockly.Msg.EVENT_WHEN_BOARD_STARTS_HELPURL = "";
Blockly.Msg.EVENT_WHEN_BOARD_STARTS_TOOLTIP = "This block is invoked at board startup. Tipically is used for initialize other blocks, and broadcast events.";
Blockly.Msg.EVENT_WHEN_DIGITAL_CHANGES = "changes at";
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN = "when digital pin";
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN_HELPURL = "";
Blockly.Msg.EVENT_WHEN_DIGITAL_PIN_TOOLTIP = "";
Blockly.Msg.EVENT_WHEN_I_RECEIVE = "when I receive";
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME = "when I receive a LoRa frame";
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME_HELPURL = "";
Blockly.Msg.EVENT_WHEN_I_RECEIVE_A_LORA_FRAME_TOOLTIP = "This block is invoked when a LoRa frame is received.";
Blockly.Msg.EVENT_WHEN_I_RECEIVE_HELPURL = "";
Blockly.Msg.EVENT_WHEN_I_RECEIVE_TOOLTIP = "This block will be invoked once the specified broadcast has been sent by an other script.";
Blockly.Msg.EVENT_WHEN_WIFI_IS_CONNECTED = "when Wi-Fi is connected";
Blockly.Msg.EVENT_WHEN_WIFI_IS_CONNECTED_TOOLTIP = "This block is invoked when the Wi-Fi connected.";
Blockly.Msg.EVENT_WHEN_WIFI_IS_DISCONNECTED = "when Wi-Fi is disconnected";
Blockly.Msg.EVENT_WHEN_WIFI_IS_DISCONNECTED_TOOLTIP = "This block is invoked when the Wi-Fi disconnected.";
Blockly.Msg.EXPAND_ALL = "Expand Blocks";
Blockly.Msg.EXPAND_BLOCK = "Expand Block";
Blockly.Msg.EXTERNAL_INPUTS = "External Inputs";
Blockly.Msg.FALSE = "false";
Blockly.Msg.FILE_DELETED = "%1 has been deleted.";
Blockly.Msg.FOREVER = "forever";
Blockly.Msg.FREQUENCY = "to frequency";
Blockly.Msg.GPS = "NMEA GPS";
Blockly.Msg.HALL_FLOW = "Flow by hall effect";
Blockly.Msg.HALL_SWITCH = "Hall effect switch";
Blockly.Msg.HELP = "Help";
Blockly.Msg.HERTZS = "hertzs";
Blockly.Msg.HIGH = "high";
Blockly.Msg.IN = "in";
Blockly.Msg.INLINE_INPUTS = "Inline Inputs";
Blockly.Msg.INPUT = "input";
Blockly.Msg.INPUT_PINS = "input pin";
Blockly.Msg.INTERNAL_HALL = "Internal hall effect sensor";
Blockly.Msg.Khz = "Khz";
Blockly.Msg.LINEAR_POT = "Linear pot";
Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "create empty list";
Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Returns a list, of length 0, containing no data records";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "list";
Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Add, remove, or reorder sections to reconfigure this list block.";
Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "create list with";
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Add an item to the list.";
Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Create a list with any number of items.";
Blockly.Msg.LISTS_GET_INDEX_FIRST = "first";
Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# from end";
Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
Blockly.Msg.LISTS_GET_INDEX_GET = "get";
Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "get and remove";
Blockly.Msg.LISTS_GET_INDEX_LAST = "last";
Blockly.Msg.LISTS_GET_INDEX_RANDOM = "random";
Blockly.Msg.LISTS_GET_INDEX_REMOVE = "remove";
Blockly.Msg.LISTS_GET_INDEX_TAIL = "";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Returns the item at the specified position in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Removes and returns the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Removes and returns the item at the specified position in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Removes and returns the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Removes and returns a random item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Removes the first item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Removes the item at the specified position in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Removes the last item in a list.";
Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Removes a random item in a list.";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "to # from end";
Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "to #";
Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "to last";
Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";
Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "get sub-list from first";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "get sub-list from # from end";
Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "get sub-list from #";
Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";
Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Creates a copy of the specified portion of a list.";
Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "%1 is the last item.";
Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 is the first item.";
Blockly.Msg.LISTS_INDEX_OF_FIRST = "find first occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";
Blockly.Msg.LISTS_INDEX_OF_LAST = "find last occurrence of item";
Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Returns the index of the first/last occurrence of the item in the list. Returns %1 if item is not found.";
Blockly.Msg.LISTS_INLIST = "in list";
Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";
Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Returns true if the list is empty.";
Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";
Blockly.Msg.LISTS_LENGTH_TITLE = "length of %1";
Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Returns the length of a list.";
Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg.LISTS_REPEAT_TITLE = "create list with item %1 repeated %2 times";
Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Creates a list consisting of the given value repeated the specified number of times.";
Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";
Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "as";
Blockly.Msg.LISTS_SET_INDEX_INSERT = "insert at";
Blockly.Msg.LISTS_SET_INDEX_SET = "set";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserts the item at the start of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Inserts the item at the specified position in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Append the item to the end of a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserts the item randomly in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Sets the first item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Sets the item at the specified position in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Sets the last item in a list.";
Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Sets a random item in a list.";
Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascending";
Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descending";
Blockly.Msg.LISTS_SORT_TITLE = "sort %1 %2 %3";
Blockly.Msg.LISTS_SORT_TOOLTIP = "Sort a copy of a list.";
Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alphabetic, ignore case";
Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numeric";
Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alphabetic";
Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "make list from text";
Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "make text from list";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Join a list of texts into one text, separated by a delimiter.";
Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Split text into a list of texts, breaking at each delimiter.";
Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "with delimiter";
Blockly.Msg.LOGIC_BOOLEAN_FALSE = "false";
Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";
Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Returns either true or false.";
Blockly.Msg.LOGIC_BOOLEAN_TRUE = "true";
Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Return true if both inputs equal each other.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Return true if the first input is greater than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Return true if the first input is greater than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Return true if the first input is smaller than the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Return true if the first input is smaller than or equal to the second input.";
Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Return true if both inputs are not equal to each other.";
Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";
Blockly.Msg.LOGIC_NEGATE_TITLE = "not %1";
Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Returns true if the input is false. Returns false if the input is true.";
Blockly.Msg.LOGIC_NULL = "null";
Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg.LOGIC_NULL_TOOLTIP = "Returns null.";
Blockly.Msg.LOGIC_OPERATION_AND = "and";
Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";
Blockly.Msg.LOGIC_OPERATION_OR = "or";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Return true if both inputs are true.";
Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Return true if at least one of the inputs is true.";
Blockly.Msg.LOGIC_TERNARY_CONDITION = "test";
Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "if false";
Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "if true";
Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Check the condition in 'test'. If the condition is true, returns the 'if true' value; otherwise returns the 'if false' value.";
Blockly.Msg.LORA_ACTIVATION = "Activation";
Blockly.Msg.LORA_ACTIVATION_DATA = "Node activation data:";
Blockly.Msg.LORA_ADR = "Adaptative Data Rate";
Blockly.Msg.LORA_BAND = "Band";
Blockly.Msg.LORA_CONFIG_RETX = "Retransmissions";
Blockly.Msg.LORA_CONFIG_TITLE = "LoRa WAN configuration ...";
Blockly.Msg.LORA_CONFIRMED = "confirmed";
Blockly.Msg.LORA_DR = "Data Rate";
Blockly.Msg.LORA_FRAME = " frame to port ";
Blockly.Msg.LORA_FREQ = "Frequency";
Blockly.Msg.LORA_GATEWAY = "1-channel gateway";
Blockly.Msg.LORA_GET_ABP_DATA_HELP = "The Whitecat IDE offer to its users a TTN LoRa WAN application for test an ABP node. If you want to use it, please click the 'Get data' button to get the personalization data.";
Blockly.Msg.LORA_GET_DATA = "Get data ...";
Blockly.Msg.LORA_GET_OTAA_DATA_HELP = "The Whitecat IDE offer to its users a TTN LoRa WAN application for test an OTAA node. If you want to use it, please click the 'Get data' button to get the activation data.";
Blockly.Msg.LORA_GET_PAYLOAD = "get payload from received frame";
Blockly.Msg.LORA_GET_PORT = "get port from received frame";
Blockly.Msg.LORA_INVALID = "Invalid %1 value.";
Blockly.Msg.LORA_JOIN = "join";
Blockly.Msg.LORA_NODE = "Node";
Blockly.Msg.LORA_PAYLOAD = " with payload ";
Blockly.Msg.LORA_PERSONALIZATION_DATA = "Node personalization data:";
Blockly.Msg.LORA_ROLE = "Role";
Blockly.Msg.LORA_ROLE_GATEWAY_TITLE = "Gateway configuration:";
Blockly.Msg.LORA_ROLE_NODE_TITLE = "Basic node configuration:";
Blockly.Msg.LORA_SET_ADR = "set adaptative data rate to";
Blockly.Msg.LORA_SET_APPEUI = "set AppEui to";
Blockly.Msg.LORA_SET_APPKEY = "set AppKey to";
Blockly.Msg.LORA_SET_APPSKEY = "set setAppsKey to";
Blockly.Msg.LORA_SET_AR = "set automatic reply to";
Blockly.Msg.LORA_SET_DEVADDR = "set DevAddr to";
Blockly.Msg.LORA_SET_DEVEUI = "set DevEui to";
Blockly.Msg.LORA_SET_DR = "set data rate to";
Blockly.Msg.LORA_SET_NWKSKEY = "set NwksKey to";
Blockly.Msg.LORA_SET_RETX = "set retransmissions to";
Blockly.Msg.LORA_START_GW = "start gateway";
Blockly.Msg.LORA_STOP_GW = "stop gateway";
Blockly.Msg.LORA_TX = "transmit ";
Blockly.Msg.LORA_UNCONFIRMED = "unconfirmed";
Blockly.Msg.LOW = "low";
Blockly.Msg.MATH_ADDITION_SYMBOL = "+";
Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Return the sum of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Return the quotient of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Return the difference of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Return the product of the two numbers.";
Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Return the first number raised to the power of the second number.";
Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg.MATH_CHANGE_TITLE = "change %1 by %2";
Blockly.Msg.MATH_CHANGE_TOOLTIP = "Add a number to variable '%1'.";
Blockly.Msg.MATH_CONSTANT_HELPURL = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Return one of the common constants: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_%28graphics%29";
Blockly.Msg.MATH_CONSTRAIN_TITLE = "constrain %1 low %2 high %3";
Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Constrain a number to be between the specified limits (inclusive).";
Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";
Blockly.Msg.MATH_IS_DIVISIBLE_BY = "is divisible by";
Blockly.Msg.MATH_IS_EVEN = "is even";
Blockly.Msg.MATH_IS_NEGATIVE = "is negative";
Blockly.Msg.MATH_IS_ODD = "is odd";
Blockly.Msg.MATH_IS_POSITIVE = "is positive";
Blockly.Msg.MATH_IS_PRIME = "is prime";
Blockly.Msg.MATH_IS_TOOLTIP = "Check if a number is an even, odd, prime, whole, positive, negative, or if it is divisible by certain number. Returns true or false.";
Blockly.Msg.MATH_IS_WHOLE = "is whole";
Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg.MATH_MODULO_TITLE = "remainder of %1 ÷ %2";
Blockly.Msg.MATH_MODULO_TOOLTIP = "Return the remainder from dividing the two numbers.";
Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";
Blockly.Msg.MATH_NUMBER_HELPURL = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg.MATH_NUMBER_TOOLTIP = "A number.";
Blockly.Msg.MATH_ONLIST_HELPURL = "";
Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "average of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "max of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "median of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "min of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modes of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "random item of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "standard deviation of list";
Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "sum of list";
Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Return the average (arithmetic mean) of the numeric values in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Return the largest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Return the median number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Return the smallest number in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Return a list of the most common item(s) in the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Return a random element from the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Return the standard deviation of the list.";
Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Return the sum of all the numbers in the list.";
Blockly.Msg.MATH_POWER_SYMBOL = "^";
Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "random fraction";
Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Return a random fraction between 0.0 (inclusive) and 1.0 (exclusive).";
Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg.MATH_RANDOM_INT_TITLE = "random integer from %1 to %2";
Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Return a random integer between the two specified limits, inclusive.";
Blockly.Msg.MATH_ROUND_HELPURL = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "round";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "round down";
Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "round up";
Blockly.Msg.MATH_ROUND_TOOLTIP = "Round a number up or down.";
Blockly.Msg.MATH_SINGLE_HELPURL = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absolute";
Blockly.Msg.MATH_SINGLE_OP_ROOT = "square root";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Return the absolute value of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Return e to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Return the natural logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Return the base 10 logarithm of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Return the negation of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Return 10 to the power of a number.";
Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Return the square root of a number.";
Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";
Blockly.Msg.MATH_TRIG_ACOS = "acos";
Blockly.Msg.MATH_TRIG_ASIN = "asin";
Blockly.Msg.MATH_TRIG_ATAN = "atan";
Blockly.Msg.MATH_TRIG_COS = "cos";
Blockly.Msg.MATH_TRIG_HELPURL = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg.MATH_TRIG_SIN = "sin";
Blockly.Msg.MATH_TRIG_TAN = "tan";
Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Return the arccosine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Return the arcsine of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Return the arctangent of a number.";
Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Return the cosine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Return the sine of a degree (not radian).";
Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Return the tangent of a degree (not radian).";
Blockly.Msg.MHZ = "MHz";
Blockly.Msg.MQTT_CONFIG_TITLE = "Configure MQTT client ...";
Blockly.Msg.MQTT_GET_DATA = "Get data ...";
Blockly.Msg.MQTT_GET_DATA_HELP = "The Whitecat IDE offer to its users a MQTT broquer for testing purposes. If you want to use it, please click the 'Get data' button to get the connection data.";
Blockly.Msg.MQTT_GET_LEN = "get length of the received message";
Blockly.Msg.MQTT_GET_PAYLOAD = "get the received message";
Blockly.Msg.MQTT_INVALID = "Invalid value %1.";
Blockly.Msg.MQTT_PUBLISH = "publish";
Blockly.Msg.MQTT_QOS = "with";
Blockly.Msg.MQTT_SUBSCRIBE = "when a message is received to topic";
Blockly.Msg.MQTT_TO_TOPIC = "to topic";
Blockly.Msg.NEW_CAN_FRAME = "New frame ...";
Blockly.Msg.NEW_CAN_FRAME_TITLE = "New frame ...";
Blockly.Msg.NEW_EVENT = "New event ...";
Blockly.Msg.NEW_EVENT_TITLE = "New event ...";
Blockly.Msg.NEW_SENSOR = "Create new sensor...";
Blockly.Msg.NEW_SENSOR_SELECT_ONE = "(select one)";
Blockly.Msg.NEW_SENSOR_TITLE = "New sensor ...";
Blockly.Msg.NEW_VARIABLE = "Create variable...";
Blockly.Msg.NEW_VARIABLE_TITLE = "New variable name:";
Blockly.Msg.NO = "No";
Blockly.Msg.ONLY_ALLOWED_WITHIN_BLOCK = "Warning: This block may only be used within a \"%1\" block";
Blockly.Msg.ON_EVERY_RECEIVED_LORA_FRAME = "a LoRa WAN frame is received";
Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";
Blockly.Msg.OUTPUT = "output";
Blockly.Msg.OUTPUT_PINS = "output pin";
Blockly.Msg.PERCENT = "%";
Blockly.Msg.PING28015 = "PING))) 28015";
Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "allow statements";
Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Run the user-defined function '%1'.";
Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Run the user-defined function '%1' and use its output.";
Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "with:";
Blockly.Msg.PROCEDURES_CREATE_DO = "Create '%1'";
Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe this function...";
Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";
Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "do something";
Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "to";
Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Creates a function with no output.";
Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "return";
Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Creates a function with an output.";
Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Warning: This function has duplicate parameters.";
Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Highlight function definition";
Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "If a value is true, then return a second value.";
Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Warning: This block may be used only within a function definition.";
Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "input name:";
Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Add an input to the function.";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "inputs";
Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Add, remove, or reorder inputs to this function.";
Blockly.Msg.PUSH_SWITCH = "Push switch";
Blockly.Msg.PWM_PINS = "pwm pin";
Blockly.Msg.REDO = "Redo";
Blockly.Msg.REL_ROT_ENCODER = "Relative rotary encoder";
Blockly.Msg.REMOVE_COMMENT = "Remove Comment";
Blockly.Msg.REMOVE_SENSOR = "Remove sensor ...";
Blockly.Msg.RENAME_CAN_FRAME = "Rename frame...";
Blockly.Msg.RENAME_EVENT = "Rename event...";
Blockly.Msg.RENAME_SENSOR = "Renane sensor ...";
Blockly.Msg.RENAME_VARIABLE = "Rename variable...";
Blockly.Msg.RENAME_VARIABLE_TITLE = "Rename all '%1' variables to:";
Blockly.Msg.S2Y0A21 = "Sharp 2Y0A21";
Blockly.Msg.SENSOR = "Sensor";
Blockly.Msg.SENSOR_ACQUIRE = "acquire data from %1 (%2)";
Blockly.Msg.SENSOR_ACQUIRE_HELPURL = "";
Blockly.Msg.SENSOR_ACQUIRE_TOOLTIP = "Acquire data from sensor.";
Blockly.Msg.SENSOR_ALREADY_EXISTS = "A sensor named '%1' already exists.";
Blockly.Msg.SENSOR_ATTACH = "attach %1 (%2)";
Blockly.Msg.SENSOR_ATTACH_HELPURL = "";
Blockly.Msg.SENSOR_ATTACH_TOOLTIP = "Attach sensor to its hardware interface.";
Blockly.Msg.SENSOR_CANCEL = "Cancel";
Blockly.Msg.SENSOR_CATEGORY = "Category";
Blockly.Msg.SENSOR_CREATE = "Create";
Blockly.Msg.SENSOR_DEFAULT_NAME = "sensor";
Blockly.Msg.SENSOR_DEVICE_ADDR = "Adress on bus";
Blockly.Msg.SENSOR_DEVICE_ID = "Identifier on bus";
Blockly.Msg.SENSOR_DISCOVER = "Discover on bus";
Blockly.Msg.SENSOR_INT_ATTACHED = "%1 attached at";
Blockly.Msg.SENSOR_NAME = "Name in the workspace";
Blockly.Msg.SENSOR_READ1 = "read ";
Blockly.Msg.SENSOR_READ2 = " from %1 (%2)";
Blockly.Msg.SENSOR_READ_HELPURL = "";
Blockly.Msg.SENSOR_READ_TOOLTIP = "Read data from sensor.";
Blockly.Msg.SENSOR_REMOVE_CONFIRM = "Do you want to remove %1 sensor from your project?";
Blockly.Msg.SENSOR_SET1 = "set ";
Blockly.Msg.SENSOR_SET2 = " with value ";
Blockly.Msg.SENSOR_SET3 = " for %1 (%2)";
Blockly.Msg.SENSOR_SET_HELPURL = "";
Blockly.Msg.SENSOR_SET_TOOLTIP = "Set configuration options for sensor.";
Blockly.Msg.SENSOR_WHEN1 = "when ";
Blockly.Msg.SENSOR_WHEN2 = " changes from %1 (%2)";
Blockly.Msg.SENSOR_WHEN_HELPURL = "";
Blockly.Msg.SENSOR_WHEN_TOOLTIP = "This block is invoked when the magnitude changes.";
Blockly.Msg.SERVO_ATTACH = "attach servo on pin";
Blockly.Msg.SERVO_ATTACH_HELPURL = "";
Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach a servo to a pin.";
Blockly.Msg.SERVO_CALIBRATE = "Calibrate ...";
Blockly.Msg.SERVO_MOVE = "move servo on pin";
Blockly.Msg.SERVO_MOVE_DEGREES = "degrees";
Blockly.Msg.SERVO_MOVE_HELPURL = "";
Blockly.Msg.SERVO_MOVE_TOOLTIP = "Moves the servo attached on pin by a number of degrees. If degrees are > 0 movement is clockwise, and if movement is < 0 movement is counterclockwise";
Blockly.Msg.TEXT_APPEND_APPENDTEXT = "append text";
Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_APPEND_TO = "to";
Blockly.Msg.TEXT_APPEND_TOOLTIP = "Append some text to variable '%1'.";
Blockly.Msg.TEXT_CATCH_TITLE = "catch";
Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "to lower case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "to Title Case";
Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "to UPPER CASE";
Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Return a copy of the text in a different case.";
Blockly.Msg.TEXT_CHARAT_FIRST = "get first letter";
Blockly.Msg.TEXT_CHARAT_FROM_END = "get letter # from end";
Blockly.Msg.TEXT_CHARAT_FROM_START = "get letter #";
Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";
Blockly.Msg.TEXT_CHARAT_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_CHARAT_LAST = "get last letter";
Blockly.Msg.TEXT_CHARAT_RANDOM = "get random letter";
Blockly.Msg.TEXT_CHARAT_TAIL = "";
Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Returns the letter at the specified position.";
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Add an item to the text.";
Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "join";
Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Add, remove, or reorder sections to reconfigure this text block.";
Blockly.Msg.TEXT_FINALLY = "finally";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "to letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "to letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "to last letter";
Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";
Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "in text";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "get substring from first letter";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "get substring from letter # from end";
Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "get substring from letter #";
Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";
Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Returns a specified portion of the text.";
Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";
Blockly.Msg.TEXT_INDEXOF_INPUT_INTEXT = "in text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "find first occurrence of text";
Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "find last occurrence of text";
Blockly.Msg.TEXT_INDEXOF_TAIL = "";
Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Returns the index of the first/last occurrence of the first text in the second text. Returns %1 if text is not found.";
Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";
Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 is empty";
Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Returns true if the provided text is empty.";
Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";
Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "create text with";
Blockly.Msg.TEXT_JOIN_TOOLTIP = "Create a piece of text by joining together any number of items.";
Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";
Blockly.Msg.TEXT_LENGTH_TITLE = "length of %1";
Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Returns the number of letters (including spaces) in the provided text.";
Blockly.Msg.TEXT_PACK_HELPURL = "";
Blockly.Msg.TEXT_PACK_TITLE1 = "pack hex string";
Blockly.Msg.TEXT_PACK_TITLE2 = "with";
Blockly.Msg.TEXT_PACK_TITLE3 = "to";
Blockly.Msg.TEXT_PACK_TOOLTIP = "Pack a set of values into an hex's string representation.";
Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";
Blockly.Msg.TEXT_PRINT_TITLE = "print %1";
Blockly.Msg.TEXT_PRINT_TOOLTIP = "Print the specified text, number or other value.";
Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Prompt for user for a number.";
Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Prompt for user for some text.";
Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "prompt for number with message";
Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "prompt for text with message";
Blockly.Msg.TEXT_TEXT_HELPURL = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg.TEXT_TEXT_TOOLTIP = "A letter, word, or line of text.";
Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";
Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "trim spaces from both sides of";
Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "trim spaces from left side of";
Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "trim spaces from right side of";
Blockly.Msg.TEXT_TRIM_TOOLTIP = "Return a copy of the text with spaces removed from one or both ends.";
Blockly.Msg.TEXT_TRY_CATCHED = "is catched";
Blockly.Msg.TEXT_TRY_CATCH_ERROR = "when error";
Blockly.Msg.TEXT_TRY_CATCH_OTHER_ERROR = "when other errors catched";
Blockly.Msg.TEXT_TRY_CATCH_RAISE_AGAIN = "raise catched error again";
Blockly.Msg.TEXT_TRY_HELPURL = "";
Blockly.Msg.TEXT_TRY_TITLE = "try";
Blockly.Msg.TEXT_TRY_TOOLTIP = "Try to execute a set of statements and eventualy catch the errors without stop program.";
Blockly.Msg.TEXT_UNPACK_HELPURL = "";
Blockly.Msg.TEXT_UNPACK_TITLE1 = "unpack hex string";
Blockly.Msg.TEXT_UNPACK_TITLE2 = "to";
Blockly.Msg.TEXT_UNPACK_TITLE3 = "from";
Blockly.Msg.TEXT_UNPACK_TOOLTIP = "Unpack a set of values encoded into an hex's string representation.";
Blockly.Msg.THERMISTOR = "10K thermistor";
Blockly.Msg.THREAD_RETURN = "return id";
Blockly.Msg.TILT_SWITCH = "Tilt switch";
Blockly.Msg.TO = "to";
Blockly.Msg.TODAY = "Today";
Blockly.Msg.TRUE = "true";
Blockly.Msg.UNARY_BITWISE_HELPURL = "";
Blockly.Msg.UNARY_BITWISE_TOOLTIP = "";
Blockly.Msg.UNDO = "Undo";
Blockly.Msg.UPDATE = "Update";
Blockly.Msg.VARIABLES_DEFAULT_NAME = "item";
Blockly.Msg.VARIABLES_GET_CREATE_SET = "Create 'set %1'";
Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";
Blockly.Msg.VARIABLES_GET_TOOLTIP = "Returns the value of this variable.";
Blockly.Msg.VARIABLES_LOCAL = "local variable %1";
Blockly.Msg.VARIABLES_LOCAL_TOOLTIP = "Sets the scope for this variable to local.";
Blockly.Msg.VARIABLES_SET = "set %1 to %2";
Blockly.Msg.VARIABLES_SET_CREATE_GET = "Create 'get %1'";
Blockly.Msg.VARIABLES_SET_TOOLTIP = "Sets this variable to be equal to the input.";
Blockly.Msg.VARIABLE_ALREADY_EXISTS = "A variable named '%1' already exists.";
Blockly.Msg.WARNING_CAN_INVALID_DATA = "Invalid data. Must be >= 0 and <= 255.";
Blockly.Msg.WARNING_CAN_INVALID_LEN = "Invalid length. Must be >= 0 and <= 8.";
Blockly.Msg.WARNING_CAN_INVALID_TYPE = "Invalid frame type";
Blockly.Msg.WARNING_CATCH_ERROR_NOT_ALLOWED_HERE = "Warning: This block may only be used within a 'when error is catched' block.";
Blockly.Msg.WARNING_EVENTS_CAN_ONLY_PROCESSED_IN_ONE_EVENT_BLOCK = "Warning: events can only be processed in one event block.";
Blockly.Msg.WARNING_NOT_IN_HAT_BLOCK = "Warning: this block may only be used within a hat block.";
Blockly.Msg.WARNING_ONLY_ONE_INSTANCE_ALLOWED = "Warning: only one instance of this block is allowed.";
Blockly.Msg.WARNING_RAISE_ERROR_AGAIN_NOT_ALLOWED_HERE = "Warning: This block may only be used within a 'try catch finally' block in its catch part.";
Blockly.Msg.WIFI_CONFIG_TITLE = "Wi-Fi contiguration ...";
Blockly.Msg.WIFI_INVALID = "Invalid %1 value.";
Blockly.Msg.WIFI_START = "start Wi-Fi";
Blockly.Msg.WIFI_STOP = "stop Wi-Fi";
Blockly.Msg.WIFI_TYPE = "Type";
Blockly.Msg.WITH = "with";
Blockly.Msg.YES = "Yes";
Blockly.Msg.air_quality = "Air quality";
Blockly.Msg.any = "any";
Blockly.Msg.any_edge = "any edge";
Blockly.Msg.configureLora = "configure LoRa using ";
Blockly.Msg.configureanalogpin = "configure analog pin";
Blockly.Msg.configuredigitalpin = "configure digital pin";
Blockly.Msg.distance = "Distance";
Blockly.Msg.for = "for";
Blockly.Msg.geopos = "Geographic position";
Blockly.Msg.getanalogpin = "get analog pin value";
Blockly.Msg.getdigitalpin = "get digital pin value";
Blockly.Msg.getexternalanalogchannel = "get analog value from";
Blockly.Msg.high_level = "high level";
Blockly.Msg.humidity = "Humidity";
Blockly.Msg.hz = "hz";
Blockly.Msg.i2cAddress = "set address for";
Blockly.Msg.i2cReadFrom = "read from";
Blockly.Msg.i2cSetSpeedFor = "set speed for";
Blockly.Msg.i2cSpeed = "speed";
Blockly.Msg.i2cStartConditionFor = "start condition for";
Blockly.Msg.i2cStopConditionFor = "stop condition for";
Blockly.Msg.i2cWriteTo = "write to";
Blockly.Msg.illuminance = "Illuminance";
Blockly.Msg.invertdigitalpin = "invert digital pin";
Blockly.Msg.liquid_flow = "Liquid flow";
Blockly.Msg.low_level = "low level";
Blockly.Msg.magnetic_field = "Magnetic field";
Blockly.Msg.microseconds = "microseconds";
Blockly.Msg.milliseconds = "milliseconds";
Blockly.Msg.negative_edge = "negative edge";
Blockly.Msg.other = "Other";
Blockly.Msg.positive_edge = "positive edge";
Blockly.Msg.potentiometers = "Potentiometers";
Blockly.Msg.presence = "Presence";
Blockly.Msg.pressure = "Pressure";
Blockly.Msg.read = "read";
Blockly.Msg.rotation = "Rotation";
Blockly.Msg.seconds = "seconds";
Blockly.Msg.setdigitalpin = "set digital pin";
Blockly.Msg.setpwmpin = "set PWM pin";
Blockly.Msg.soil_moisture = "Soil moisture";
Blockly.Msg.switches = "Switches";
Blockly.Msg.temperature = "Temperature";
Blockly.Msg.thread_create = "create thread";
Blockly.Msg.thread_resume = "resume thread";
Blockly.Msg.thread_sleep = "sleep";
Blockly.Msg.thread_start = "start thread";
Blockly.Msg.thread_stop = "stop thread";
Blockly.Msg.thread_suspend = "suspend thread";
Blockly.Msg.uv = "UV";
Blockly.Msg.wait_for = "wait";
Blockly.Msg.write = "write";
Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;